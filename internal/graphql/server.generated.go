// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"anime-skip.com/public-api/internal"
	"anime-skip.com/public-api/internal/graphql/scalars"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/gofrs/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Account() AccountResolver
	ApiClient() ApiClientResolver
	Episode() EpisodeResolver
	EpisodeUrl() EpisodeUrlResolver
	Mutation() MutationResolver
	Preferences() PreferencesResolver
	Query() QueryResolver
	Show() ShowResolver
	ShowAdmin() ShowAdminResolver
	Template() TemplateResolver
	TemplateTimestamp() TemplateTimestampResolver
	ThirdPartyTimestamp() ThirdPartyTimestampResolver
	Timestamp() TimestampResolver
	TimestampType() TimestampTypeResolver
	User() UserResolver
}

type DirectiveRoot struct {
	Authenticated func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasRole       func(ctx context.Context, obj interface{}, next graphql.Resolver, role internal.Role) (res interface{}, err error)
	IsShowAdmin   func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Account struct {
		AdminOfShows  func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		Email         func(childComplexity int) int
		EmailVerified func(childComplexity int) int
		ID            func(childComplexity int) int
		Preferences   func(childComplexity int) int
		ProfileURL    func(childComplexity int) int
		Role          func(childComplexity int) int
		Username      func(childComplexity int) int
	}

	ApiClient struct {
		AppName         func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		Description     func(childComplexity int) int
		ID              func(childComplexity int) int
		RateLimitRpm    func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
		User            func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	Episode struct {
		AbsoluteNumber  func(childComplexity int) int
		BaseDuration    func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Number          func(childComplexity int) int
		Season          func(childComplexity int) int
		Show            func(childComplexity int) int
		ShowID          func(childComplexity int) int
		Template        func(childComplexity int) int
		Timestamps      func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
		Urls            func(childComplexity int) int
	}

	EpisodeUrl struct {
		CreatedAt        func(childComplexity int) int
		CreatedBy        func(childComplexity int) int
		CreatedByUserID  func(childComplexity int) int
		Duration         func(childComplexity int) int
		Episode          func(childComplexity int) int
		EpisodeID        func(childComplexity int) int
		Source           func(childComplexity int) int
		TimestampsOffset func(childComplexity int) int
		URL              func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UpdatedBy        func(childComplexity int) int
		UpdatedByUserID  func(childComplexity int) int
	}

	LoginData struct {
		Account      func(childComplexity int) int
		AuthToken    func(childComplexity int) int
		RefreshToken func(childComplexity int) int
	}

	Mutation struct {
		AddTimestampToTemplate      func(childComplexity int, templateTimestamp internal.InputTemplateTimestamp) int
		ChangePassword              func(childComplexity int, oldPassword string, newPassword string, confirmNewPassword string) int
		CreateAPIClient             func(childComplexity int, client internal.CreateAPIClient) int
		CreateAccount               func(childComplexity int, username string, email string, passwordHash string, recaptchaResponse string) int
		CreateEpisode               func(childComplexity int, showID *uuid.UUID, episodeInput internal.InputEpisode) int
		CreateEpisodeURL            func(childComplexity int, episodeID *uuid.UUID, episodeURLInput internal.InputEpisodeURL) int
		CreateShow                  func(childComplexity int, showInput internal.InputShow, becomeAdmin bool) int
		CreateShowAdmin             func(childComplexity int, showAdminInput internal.InputShowAdmin) int
		CreateTemplate              func(childComplexity int, newTemplate internal.InputTemplate) int
		CreateTimestamp             func(childComplexity int, episodeID *uuid.UUID, timestampInput internal.InputTimestamp) int
		CreateTimestampType         func(childComplexity int, timestampTypeInput internal.InputTimestampType) int
		DeleteAPIClient             func(childComplexity int, id string) int
		DeleteAccount               func(childComplexity int, deleteToken string) int
		DeleteAccountRequest        func(childComplexity int, passwordHash string) int
		DeleteEpisode               func(childComplexity int, episodeID *uuid.UUID) int
		DeleteEpisodeURL            func(childComplexity int, episodeURL string) int
		DeleteShow                  func(childComplexity int, showID *uuid.UUID) int
		DeleteShowAdmin             func(childComplexity int, showAdminID *uuid.UUID) int
		DeleteTemplate              func(childComplexity int, templateID *uuid.UUID) int
		DeleteTimestamp             func(childComplexity int, timestampID *uuid.UUID) int
		DeleteTimestampType         func(childComplexity int, timestampTypeID *uuid.UUID) int
		RemoveTimestampFromTemplate func(childComplexity int, templateTimestamp internal.InputTemplateTimestamp) int
		RequestPasswordReset        func(childComplexity int, recaptchaResponse string, email string) int
		ResendVerificationEmail     func(childComplexity int, recaptchaResponse string) int
		ResetPassword               func(childComplexity int, passwordResetToken string, newPassword string, confirmNewPassword string) int
		SavePreferences             func(childComplexity int, preferences map[string]interface{}) int
		UpdateAPIClient             func(childComplexity int, id string, changes map[string]interface{}) int
		UpdateEpisode               func(childComplexity int, episodeID *uuid.UUID, newEpisode internal.InputEpisode) int
		UpdateEpisodeURL            func(childComplexity int, episodeURL string, newEpisodeURL internal.InputEpisodeURL) int
		UpdateShow                  func(childComplexity int, showID *uuid.UUID, newShow internal.InputShow) int
		UpdateTemplate              func(childComplexity int, templateID *uuid.UUID, newTemplate internal.InputTemplate) int
		UpdateTimestamp             func(childComplexity int, timestampID *uuid.UUID, newTimestamp internal.InputTimestamp) int
		UpdateTimestampType         func(childComplexity int, timestampTypeID *uuid.UUID, newTimestampType internal.InputTimestampType) int
		UpdateTimestamps            func(childComplexity int, create []*internal.InputTimestampOn, update []*internal.InputExistingTimestamp, delete []*uuid.UUID) int
		VerifyEmailAddress          func(childComplexity int, validationToken string) int
	}

	Preferences struct {
		ColorTheme                 func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		EnableAutoPlay             func(childComplexity int) int
		EnableAutoSkip             func(childComplexity int) int
		HideTimelineWhenMinimized  func(childComplexity int) int
		ID                         func(childComplexity int) int
		MinimizeToolbarWhenEditing func(childComplexity int) int
		SkipBranding               func(childComplexity int) int
		SkipCanon                  func(childComplexity int) int
		SkipCredits                func(childComplexity int) int
		SkipFiller                 func(childComplexity int) int
		SkipIntros                 func(childComplexity int) int
		SkipMixedCredits           func(childComplexity int) int
		SkipMixedIntros            func(childComplexity int) int
		SkipNewCredits             func(childComplexity int) int
		SkipNewIntros              func(childComplexity int) int
		SkipPreview                func(childComplexity int) int
		SkipRecaps                 func(childComplexity int) int
		SkipTitleCard              func(childComplexity int) int
		SkipTransitions            func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		User                       func(childComplexity int) int
		UserID                     func(childComplexity int) int
	}

	Query struct {
		Account                    func(childComplexity int) int
		AllTimestampTypes          func(childComplexity int) int
		FindAPIClient              func(childComplexity int, id string) int
		FindEpisode                func(childComplexity int, episodeID *uuid.UUID) int
		FindEpisodeByName          func(childComplexity int, name string) int
		FindEpisodeURL             func(childComplexity int, episodeURL string) int
		FindEpisodeUrlsByEpisodeID func(childComplexity int, episodeID *uuid.UUID) int
		FindEpisodesByShowID       func(childComplexity int, showID *uuid.UUID) int
		FindShow                   func(childComplexity int, showID *uuid.UUID) int
		FindShowAdmin              func(childComplexity int, showAdminID *uuid.UUID) int
		FindShowAdminsByShowID     func(childComplexity int, showID *uuid.UUID) int
		FindShowAdminsByUserID     func(childComplexity int, userID *uuid.UUID) int
		FindTemplate               func(childComplexity int, templateID *uuid.UUID) int
		FindTemplateByDetails      func(childComplexity int, episodeID *uuid.UUID, showName *string, season *string) int
		FindTemplatesByShowID      func(childComplexity int, showID *uuid.UUID) int
		FindTimestamp              func(childComplexity int, timestampID *uuid.UUID) int
		FindTimestampType          func(childComplexity int, timestampTypeID *uuid.UUID) int
		FindTimestampsByEpisodeID  func(childComplexity int, episodeID *uuid.UUID) int
		FindUser                   func(childComplexity int, userID *uuid.UUID) int
		FindUserByUsername         func(childComplexity int, username string) int
		Login                      func(childComplexity int, usernameEmail string, passwordHash string) int
		LoginRefresh               func(childComplexity int, refreshToken string) int
		MyAPIClients               func(childComplexity int, search *string, offset *int, limit *int, sort *string) int
		RecentlyAddedEpisodes      func(childComplexity int, limit *int, offset *int) int
		SearchEpisodes             func(childComplexity int, search *string, showID *uuid.UUID, offset *int, limit *int, sort *string) int
		SearchShows                func(childComplexity int, search *string, offset *int, limit *int, sort *string) int
	}

	Show struct {
		Admins          func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		EpisodeCount    func(childComplexity int) int
		Episodes        func(childComplexity int) int
		ID              func(childComplexity int) int
		Image           func(childComplexity int) int
		Name            func(childComplexity int) int
		OriginalName    func(childComplexity int) int
		SeasonCount     func(childComplexity int) int
		Templates       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
		Website         func(childComplexity int) int
	}

	ShowAdmin struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		ID              func(childComplexity int) int
		Show            func(childComplexity int) int
		ShowID          func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
		User            func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	Template struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		ID              func(childComplexity int) int
		Seasons         func(childComplexity int) int
		Show            func(childComplexity int) int
		ShowID          func(childComplexity int) int
		SourceEpisode   func(childComplexity int) int
		SourceEpisodeID func(childComplexity int) int
		TimestampIds    func(childComplexity int) int
		Timestamps      func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
	}

	TemplateTimestamp struct {
		Template    func(childComplexity int) int
		TemplateID  func(childComplexity int) int
		Timestamp   func(childComplexity int) int
		TimestampID func(childComplexity int) int
	}

	ThirdPartyEpisode struct {
		AbsoluteNumber func(childComplexity int) int
		BaseDuration   func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Number         func(childComplexity int) int
		Season         func(childComplexity int) int
		Show           func(childComplexity int) int
		ShowID         func(childComplexity int) int
		Source         func(childComplexity int) int
		Timestamps     func(childComplexity int) int
	}

	ThirdPartyShow struct {
		CreatedAt func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ThirdPartyTimestamp struct {
		At     func(childComplexity int) int
		ID     func(childComplexity int) int
		Type   func(childComplexity int) int
		TypeID func(childComplexity int) int
	}

	Timestamp struct {
		At              func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		Episode         func(childComplexity int) int
		EpisodeID       func(childComplexity int) int
		ID              func(childComplexity int) int
		Source          func(childComplexity int) int
		Type            func(childComplexity int) int
		TypeID          func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
	}

	TimestampType struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		CreatedByUserID func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		DeletedBy       func(childComplexity int) int
		DeletedByUserID func(childComplexity int) int
		Description     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
		UpdatedByUserID func(childComplexity int) int
	}

	UpdatedTimestamps struct {
		Created func(childComplexity int) int
		Deleted func(childComplexity int) int
		Updated func(childComplexity int) int
	}

	User struct {
		AdminOfShows func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		ProfileURL   func(childComplexity int) int
		Username     func(childComplexity int) int
	}
}

type AccountResolver interface {
	AdminOfShows(ctx context.Context, obj *internal.Account) ([]*internal.ShowAdmin, error)

	Preferences(ctx context.Context, obj *internal.Account) (*internal.Preferences, error)
}
type ApiClientResolver interface {
	User(ctx context.Context, obj *internal.APIClient) (*internal.User, error)
}
type EpisodeResolver interface {
	CreatedBy(ctx context.Context, obj *internal.Episode) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.Episode) (*internal.User, error)

	DeletedBy(ctx context.Context, obj *internal.Episode) (*internal.User, error)

	Show(ctx context.Context, obj *internal.Episode) (*internal.Show, error)

	Timestamps(ctx context.Context, obj *internal.Episode) ([]*internal.Timestamp, error)
	Urls(ctx context.Context, obj *internal.Episode) ([]*internal.EpisodeURL, error)
	Template(ctx context.Context, obj *internal.Episode) (*internal.Template, error)
}
type EpisodeUrlResolver interface {
	CreatedBy(ctx context.Context, obj *internal.EpisodeURL) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.EpisodeURL) (*internal.User, error)

	Episode(ctx context.Context, obj *internal.EpisodeURL) (*internal.Episode, error)
}
type MutationResolver interface {
	CreateAccount(ctx context.Context, username string, email string, passwordHash string, recaptchaResponse string) (*internal.LoginData, error)
	ChangePassword(ctx context.Context, oldPassword string, newPassword string, confirmNewPassword string) (*internal.LoginData, error)
	ResendVerificationEmail(ctx context.Context, recaptchaResponse string) (*bool, error)
	VerifyEmailAddress(ctx context.Context, validationToken string) (*internal.Account, error)
	RequestPasswordReset(ctx context.Context, recaptchaResponse string, email string) (bool, error)
	ResetPassword(ctx context.Context, passwordResetToken string, newPassword string, confirmNewPassword string) (*internal.LoginData, error)
	DeleteAccountRequest(ctx context.Context, passwordHash string) (*internal.Account, error)
	DeleteAccount(ctx context.Context, deleteToken string) (*internal.Account, error)
	SavePreferences(ctx context.Context, preferences map[string]interface{}) (*internal.Preferences, error)
	CreateShow(ctx context.Context, showInput internal.InputShow, becomeAdmin bool) (*internal.Show, error)
	UpdateShow(ctx context.Context, showID *uuid.UUID, newShow internal.InputShow) (*internal.Show, error)
	DeleteShow(ctx context.Context, showID *uuid.UUID) (*internal.Show, error)
	CreateShowAdmin(ctx context.Context, showAdminInput internal.InputShowAdmin) (*internal.ShowAdmin, error)
	DeleteShowAdmin(ctx context.Context, showAdminID *uuid.UUID) (*internal.ShowAdmin, error)
	CreateEpisode(ctx context.Context, showID *uuid.UUID, episodeInput internal.InputEpisode) (*internal.Episode, error)
	UpdateEpisode(ctx context.Context, episodeID *uuid.UUID, newEpisode internal.InputEpisode) (*internal.Episode, error)
	DeleteEpisode(ctx context.Context, episodeID *uuid.UUID) (*internal.Episode, error)
	CreateEpisodeURL(ctx context.Context, episodeID *uuid.UUID, episodeURLInput internal.InputEpisodeURL) (*internal.EpisodeURL, error)
	DeleteEpisodeURL(ctx context.Context, episodeURL string) (*internal.EpisodeURL, error)
	UpdateEpisodeURL(ctx context.Context, episodeURL string, newEpisodeURL internal.InputEpisodeURL) (*internal.EpisodeURL, error)
	CreateTimestamp(ctx context.Context, episodeID *uuid.UUID, timestampInput internal.InputTimestamp) (*internal.Timestamp, error)
	UpdateTimestamp(ctx context.Context, timestampID *uuid.UUID, newTimestamp internal.InputTimestamp) (*internal.Timestamp, error)
	DeleteTimestamp(ctx context.Context, timestampID *uuid.UUID) (*internal.Timestamp, error)
	UpdateTimestamps(ctx context.Context, create []*internal.InputTimestampOn, update []*internal.InputExistingTimestamp, delete []*uuid.UUID) (*internal.UpdatedTimestamps, error)
	CreateTimestampType(ctx context.Context, timestampTypeInput internal.InputTimestampType) (*internal.TimestampType, error)
	UpdateTimestampType(ctx context.Context, timestampTypeID *uuid.UUID, newTimestampType internal.InputTimestampType) (*internal.TimestampType, error)
	DeleteTimestampType(ctx context.Context, timestampTypeID *uuid.UUID) (*internal.TimestampType, error)
	CreateTemplate(ctx context.Context, newTemplate internal.InputTemplate) (*internal.Template, error)
	UpdateTemplate(ctx context.Context, templateID *uuid.UUID, newTemplate internal.InputTemplate) (*internal.Template, error)
	DeleteTemplate(ctx context.Context, templateID *uuid.UUID) (*internal.Template, error)
	AddTimestampToTemplate(ctx context.Context, templateTimestamp internal.InputTemplateTimestamp) (*internal.TemplateTimestamp, error)
	RemoveTimestampFromTemplate(ctx context.Context, templateTimestamp internal.InputTemplateTimestamp) (*internal.TemplateTimestamp, error)
	CreateAPIClient(ctx context.Context, client internal.CreateAPIClient) (*internal.APIClient, error)
	UpdateAPIClient(ctx context.Context, id string, changes map[string]interface{}) (*internal.APIClient, error)
	DeleteAPIClient(ctx context.Context, id string) (*internal.APIClient, error)
}
type PreferencesResolver interface {
	User(ctx context.Context, obj *internal.Preferences) (*internal.User, error)
}
type QueryResolver interface {
	Account(ctx context.Context) (*internal.Account, error)
	Login(ctx context.Context, usernameEmail string, passwordHash string) (*internal.LoginData, error)
	LoginRefresh(ctx context.Context, refreshToken string) (*internal.LoginData, error)
	FindUser(ctx context.Context, userID *uuid.UUID) (*internal.User, error)
	FindUserByUsername(ctx context.Context, username string) (*internal.User, error)
	FindShow(ctx context.Context, showID *uuid.UUID) (*internal.Show, error)
	SearchShows(ctx context.Context, search *string, offset *int, limit *int, sort *string) ([]*internal.Show, error)
	FindShowAdmin(ctx context.Context, showAdminID *uuid.UUID) (*internal.ShowAdmin, error)
	FindShowAdminsByShowID(ctx context.Context, showID *uuid.UUID) ([]*internal.ShowAdmin, error)
	FindShowAdminsByUserID(ctx context.Context, userID *uuid.UUID) ([]*internal.ShowAdmin, error)
	RecentlyAddedEpisodes(ctx context.Context, limit *int, offset *int) ([]*internal.Episode, error)
	FindEpisode(ctx context.Context, episodeID *uuid.UUID) (*internal.Episode, error)
	FindEpisodesByShowID(ctx context.Context, showID *uuid.UUID) ([]*internal.Episode, error)
	SearchEpisodes(ctx context.Context, search *string, showID *uuid.UUID, offset *int, limit *int, sort *string) ([]*internal.Episode, error)
	FindEpisodeByName(ctx context.Context, name string) ([]*internal.ThirdPartyEpisode, error)
	FindEpisodeURL(ctx context.Context, episodeURL string) (*internal.EpisodeURL, error)
	FindEpisodeUrlsByEpisodeID(ctx context.Context, episodeID *uuid.UUID) ([]*internal.EpisodeURL, error)
	FindTimestamp(ctx context.Context, timestampID *uuid.UUID) (*internal.Timestamp, error)
	FindTimestampsByEpisodeID(ctx context.Context, episodeID *uuid.UUID) ([]*internal.Timestamp, error)
	FindTimestampType(ctx context.Context, timestampTypeID *uuid.UUID) (*internal.TimestampType, error)
	AllTimestampTypes(ctx context.Context) ([]*internal.TimestampType, error)
	FindTemplate(ctx context.Context, templateID *uuid.UUID) (*internal.Template, error)
	FindTemplatesByShowID(ctx context.Context, showID *uuid.UUID) ([]*internal.Template, error)
	FindTemplateByDetails(ctx context.Context, episodeID *uuid.UUID, showName *string, season *string) (*internal.Template, error)
	MyAPIClients(ctx context.Context, search *string, offset *int, limit *int, sort *string) ([]*internal.APIClient, error)
	FindAPIClient(ctx context.Context, id string) (*internal.APIClient, error)
}
type ShowResolver interface {
	CreatedBy(ctx context.Context, obj *internal.Show) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.Show) (*internal.User, error)

	DeletedBy(ctx context.Context, obj *internal.Show) (*internal.User, error)

	Admins(ctx context.Context, obj *internal.Show) ([]*internal.ShowAdmin, error)
	Episodes(ctx context.Context, obj *internal.Show) ([]*internal.Episode, error)
	Templates(ctx context.Context, obj *internal.Show) ([]*internal.Template, error)
	SeasonCount(ctx context.Context, obj *internal.Show) (int, error)
	EpisodeCount(ctx context.Context, obj *internal.Show) (int, error)
}
type ShowAdminResolver interface {
	CreatedBy(ctx context.Context, obj *internal.ShowAdmin) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.ShowAdmin) (*internal.User, error)

	DeletedBy(ctx context.Context, obj *internal.ShowAdmin) (*internal.User, error)

	Show(ctx context.Context, obj *internal.ShowAdmin) (*internal.Show, error)

	User(ctx context.Context, obj *internal.ShowAdmin) (*internal.User, error)
}
type TemplateResolver interface {
	CreatedBy(ctx context.Context, obj *internal.Template) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.Template) (*internal.User, error)

	DeletedBy(ctx context.Context, obj *internal.Template) (*internal.User, error)

	Show(ctx context.Context, obj *internal.Template) (*internal.Show, error)

	SourceEpisode(ctx context.Context, obj *internal.Template) (*internal.Episode, error)
	Timestamps(ctx context.Context, obj *internal.Template) ([]*internal.Timestamp, error)
	TimestampIds(ctx context.Context, obj *internal.Template) ([]*uuid.UUID, error)
}
type TemplateTimestampResolver interface {
	Template(ctx context.Context, obj *internal.TemplateTimestamp) (*internal.Template, error)

	Timestamp(ctx context.Context, obj *internal.TemplateTimestamp) (*internal.Timestamp, error)
}
type ThirdPartyTimestampResolver interface {
	Type(ctx context.Context, obj *internal.ThirdPartyTimestamp) (*internal.TimestampType, error)
}
type TimestampResolver interface {
	CreatedBy(ctx context.Context, obj *internal.Timestamp) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.Timestamp) (*internal.User, error)

	DeletedBy(ctx context.Context, obj *internal.Timestamp) (*internal.User, error)

	Type(ctx context.Context, obj *internal.Timestamp) (*internal.TimestampType, error)

	Episode(ctx context.Context, obj *internal.Timestamp) (*internal.Episode, error)
}
type TimestampTypeResolver interface {
	CreatedBy(ctx context.Context, obj *internal.TimestampType) (*internal.User, error)

	UpdatedBy(ctx context.Context, obj *internal.TimestampType) (*internal.User, error)

	DeletedBy(ctx context.Context, obj *internal.TimestampType) (*internal.User, error)
}
type UserResolver interface {
	AdminOfShows(ctx context.Context, obj *internal.User) ([]*internal.ShowAdmin, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Account.adminOfShows":
		if e.complexity.Account.AdminOfShows == nil {
			break
		}

		return e.complexity.Account.AdminOfShows(childComplexity), true

	case "Account.createdAt":
		if e.complexity.Account.CreatedAt == nil {
			break
		}

		return e.complexity.Account.CreatedAt(childComplexity), true

	case "Account.deletedAt":
		if e.complexity.Account.DeletedAt == nil {
			break
		}

		return e.complexity.Account.DeletedAt(childComplexity), true

	case "Account.email":
		if e.complexity.Account.Email == nil {
			break
		}

		return e.complexity.Account.Email(childComplexity), true

	case "Account.emailVerified":
		if e.complexity.Account.EmailVerified == nil {
			break
		}

		return e.complexity.Account.EmailVerified(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.preferences":
		if e.complexity.Account.Preferences == nil {
			break
		}

		return e.complexity.Account.Preferences(childComplexity), true

	case "Account.profileUrl":
		if e.complexity.Account.ProfileURL == nil {
			break
		}

		return e.complexity.Account.ProfileURL(childComplexity), true

	case "Account.role":
		if e.complexity.Account.Role == nil {
			break
		}

		return e.complexity.Account.Role(childComplexity), true

	case "Account.username":
		if e.complexity.Account.Username == nil {
			break
		}

		return e.complexity.Account.Username(childComplexity), true

	case "ApiClient.appName":
		if e.complexity.ApiClient.AppName == nil {
			break
		}

		return e.complexity.ApiClient.AppName(childComplexity), true

	case "ApiClient.createdAt":
		if e.complexity.ApiClient.CreatedAt == nil {
			break
		}

		return e.complexity.ApiClient.CreatedAt(childComplexity), true

	case "ApiClient.createdBy":
		if e.complexity.ApiClient.CreatedBy == nil {
			break
		}

		return e.complexity.ApiClient.CreatedBy(childComplexity), true

	case "ApiClient.createdByUserId":
		if e.complexity.ApiClient.CreatedByUserID == nil {
			break
		}

		return e.complexity.ApiClient.CreatedByUserID(childComplexity), true

	case "ApiClient.deletedAt":
		if e.complexity.ApiClient.DeletedAt == nil {
			break
		}

		return e.complexity.ApiClient.DeletedAt(childComplexity), true

	case "ApiClient.deletedBy":
		if e.complexity.ApiClient.DeletedBy == nil {
			break
		}

		return e.complexity.ApiClient.DeletedBy(childComplexity), true

	case "ApiClient.deletedByUserId":
		if e.complexity.ApiClient.DeletedByUserID == nil {
			break
		}

		return e.complexity.ApiClient.DeletedByUserID(childComplexity), true

	case "ApiClient.description":
		if e.complexity.ApiClient.Description == nil {
			break
		}

		return e.complexity.ApiClient.Description(childComplexity), true

	case "ApiClient.id":
		if e.complexity.ApiClient.ID == nil {
			break
		}

		return e.complexity.ApiClient.ID(childComplexity), true

	case "ApiClient.rateLimitRpm":
		if e.complexity.ApiClient.RateLimitRpm == nil {
			break
		}

		return e.complexity.ApiClient.RateLimitRpm(childComplexity), true

	case "ApiClient.updatedAt":
		if e.complexity.ApiClient.UpdatedAt == nil {
			break
		}

		return e.complexity.ApiClient.UpdatedAt(childComplexity), true

	case "ApiClient.updatedBy":
		if e.complexity.ApiClient.UpdatedBy == nil {
			break
		}

		return e.complexity.ApiClient.UpdatedBy(childComplexity), true

	case "ApiClient.updatedByUserId":
		if e.complexity.ApiClient.UpdatedByUserID == nil {
			break
		}

		return e.complexity.ApiClient.UpdatedByUserID(childComplexity), true

	case "ApiClient.user":
		if e.complexity.ApiClient.User == nil {
			break
		}

		return e.complexity.ApiClient.User(childComplexity), true

	case "ApiClient.userId":
		if e.complexity.ApiClient.UserID == nil {
			break
		}

		return e.complexity.ApiClient.UserID(childComplexity), true

	case "Episode.absoluteNumber":
		if e.complexity.Episode.AbsoluteNumber == nil {
			break
		}

		return e.complexity.Episode.AbsoluteNumber(childComplexity), true

	case "Episode.baseDuration":
		if e.complexity.Episode.BaseDuration == nil {
			break
		}

		return e.complexity.Episode.BaseDuration(childComplexity), true

	case "Episode.createdAt":
		if e.complexity.Episode.CreatedAt == nil {
			break
		}

		return e.complexity.Episode.CreatedAt(childComplexity), true

	case "Episode.createdBy":
		if e.complexity.Episode.CreatedBy == nil {
			break
		}

		return e.complexity.Episode.CreatedBy(childComplexity), true

	case "Episode.createdByUserId":
		if e.complexity.Episode.CreatedByUserID == nil {
			break
		}

		return e.complexity.Episode.CreatedByUserID(childComplexity), true

	case "Episode.deletedAt":
		if e.complexity.Episode.DeletedAt == nil {
			break
		}

		return e.complexity.Episode.DeletedAt(childComplexity), true

	case "Episode.deletedBy":
		if e.complexity.Episode.DeletedBy == nil {
			break
		}

		return e.complexity.Episode.DeletedBy(childComplexity), true

	case "Episode.deletedByUserId":
		if e.complexity.Episode.DeletedByUserID == nil {
			break
		}

		return e.complexity.Episode.DeletedByUserID(childComplexity), true

	case "Episode.id":
		if e.complexity.Episode.ID == nil {
			break
		}

		return e.complexity.Episode.ID(childComplexity), true

	case "Episode.name":
		if e.complexity.Episode.Name == nil {
			break
		}

		return e.complexity.Episode.Name(childComplexity), true

	case "Episode.number":
		if e.complexity.Episode.Number == nil {
			break
		}

		return e.complexity.Episode.Number(childComplexity), true

	case "Episode.season":
		if e.complexity.Episode.Season == nil {
			break
		}

		return e.complexity.Episode.Season(childComplexity), true

	case "Episode.show":
		if e.complexity.Episode.Show == nil {
			break
		}

		return e.complexity.Episode.Show(childComplexity), true

	case "Episode.showId":
		if e.complexity.Episode.ShowID == nil {
			break
		}

		return e.complexity.Episode.ShowID(childComplexity), true

	case "Episode.template":
		if e.complexity.Episode.Template == nil {
			break
		}

		return e.complexity.Episode.Template(childComplexity), true

	case "Episode.timestamps":
		if e.complexity.Episode.Timestamps == nil {
			break
		}

		return e.complexity.Episode.Timestamps(childComplexity), true

	case "Episode.updatedAt":
		if e.complexity.Episode.UpdatedAt == nil {
			break
		}

		return e.complexity.Episode.UpdatedAt(childComplexity), true

	case "Episode.updatedBy":
		if e.complexity.Episode.UpdatedBy == nil {
			break
		}

		return e.complexity.Episode.UpdatedBy(childComplexity), true

	case "Episode.updatedByUserId":
		if e.complexity.Episode.UpdatedByUserID == nil {
			break
		}

		return e.complexity.Episode.UpdatedByUserID(childComplexity), true

	case "Episode.urls":
		if e.complexity.Episode.Urls == nil {
			break
		}

		return e.complexity.Episode.Urls(childComplexity), true

	case "EpisodeUrl.createdAt":
		if e.complexity.EpisodeUrl.CreatedAt == nil {
			break
		}

		return e.complexity.EpisodeUrl.CreatedAt(childComplexity), true

	case "EpisodeUrl.createdBy":
		if e.complexity.EpisodeUrl.CreatedBy == nil {
			break
		}

		return e.complexity.EpisodeUrl.CreatedBy(childComplexity), true

	case "EpisodeUrl.createdByUserId":
		if e.complexity.EpisodeUrl.CreatedByUserID == nil {
			break
		}

		return e.complexity.EpisodeUrl.CreatedByUserID(childComplexity), true

	case "EpisodeUrl.duration":
		if e.complexity.EpisodeUrl.Duration == nil {
			break
		}

		return e.complexity.EpisodeUrl.Duration(childComplexity), true

	case "EpisodeUrl.episode":
		if e.complexity.EpisodeUrl.Episode == nil {
			break
		}

		return e.complexity.EpisodeUrl.Episode(childComplexity), true

	case "EpisodeUrl.episodeId":
		if e.complexity.EpisodeUrl.EpisodeID == nil {
			break
		}

		return e.complexity.EpisodeUrl.EpisodeID(childComplexity), true

	case "EpisodeUrl.source":
		if e.complexity.EpisodeUrl.Source == nil {
			break
		}

		return e.complexity.EpisodeUrl.Source(childComplexity), true

	case "EpisodeUrl.timestampsOffset":
		if e.complexity.EpisodeUrl.TimestampsOffset == nil {
			break
		}

		return e.complexity.EpisodeUrl.TimestampsOffset(childComplexity), true

	case "EpisodeUrl.url":
		if e.complexity.EpisodeUrl.URL == nil {
			break
		}

		return e.complexity.EpisodeUrl.URL(childComplexity), true

	case "EpisodeUrl.updatedAt":
		if e.complexity.EpisodeUrl.UpdatedAt == nil {
			break
		}

		return e.complexity.EpisodeUrl.UpdatedAt(childComplexity), true

	case "EpisodeUrl.updatedBy":
		if e.complexity.EpisodeUrl.UpdatedBy == nil {
			break
		}

		return e.complexity.EpisodeUrl.UpdatedBy(childComplexity), true

	case "EpisodeUrl.updatedByUserId":
		if e.complexity.EpisodeUrl.UpdatedByUserID == nil {
			break
		}

		return e.complexity.EpisodeUrl.UpdatedByUserID(childComplexity), true

	case "LoginData.account":
		if e.complexity.LoginData.Account == nil {
			break
		}

		return e.complexity.LoginData.Account(childComplexity), true

	case "LoginData.authToken":
		if e.complexity.LoginData.AuthToken == nil {
			break
		}

		return e.complexity.LoginData.AuthToken(childComplexity), true

	case "LoginData.refreshToken":
		if e.complexity.LoginData.RefreshToken == nil {
			break
		}

		return e.complexity.LoginData.RefreshToken(childComplexity), true

	case "Mutation.addTimestampToTemplate":
		if e.complexity.Mutation.AddTimestampToTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_addTimestampToTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTimestampToTemplate(childComplexity, args["templateTimestamp"].(internal.InputTemplateTimestamp)), true

	case "Mutation.changePassword":
		if e.complexity.Mutation.ChangePassword == nil {
			break
		}

		args, err := ec.field_Mutation_changePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePassword(childComplexity, args["oldPassword"].(string), args["newPassword"].(string), args["confirmNewPassword"].(string)), true

	case "Mutation.createApiClient":
		if e.complexity.Mutation.CreateAPIClient == nil {
			break
		}

		args, err := ec.field_Mutation_createApiClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAPIClient(childComplexity, args["client"].(internal.CreateAPIClient)), true

	case "Mutation.createAccount":
		if e.complexity.Mutation.CreateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccount(childComplexity, args["username"].(string), args["email"].(string), args["passwordHash"].(string), args["recaptchaResponse"].(string)), true

	case "Mutation.createEpisode":
		if e.complexity.Mutation.CreateEpisode == nil {
			break
		}

		args, err := ec.field_Mutation_createEpisode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEpisode(childComplexity, args["showId"].(*uuid.UUID), args["episodeInput"].(internal.InputEpisode)), true

	case "Mutation.createEpisodeUrl":
		if e.complexity.Mutation.CreateEpisodeURL == nil {
			break
		}

		args, err := ec.field_Mutation_createEpisodeUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEpisodeURL(childComplexity, args["episodeId"].(*uuid.UUID), args["episodeUrlInput"].(internal.InputEpisodeURL)), true

	case "Mutation.createShow":
		if e.complexity.Mutation.CreateShow == nil {
			break
		}

		args, err := ec.field_Mutation_createShow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateShow(childComplexity, args["showInput"].(internal.InputShow), args["becomeAdmin"].(bool)), true

	case "Mutation.createShowAdmin":
		if e.complexity.Mutation.CreateShowAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_createShowAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateShowAdmin(childComplexity, args["showAdminInput"].(internal.InputShowAdmin)), true

	case "Mutation.createTemplate":
		if e.complexity.Mutation.CreateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTemplate(childComplexity, args["newTemplate"].(internal.InputTemplate)), true

	case "Mutation.createTimestamp":
		if e.complexity.Mutation.CreateTimestamp == nil {
			break
		}

		args, err := ec.field_Mutation_createTimestamp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTimestamp(childComplexity, args["episodeId"].(*uuid.UUID), args["timestampInput"].(internal.InputTimestamp)), true

	case "Mutation.createTimestampType":
		if e.complexity.Mutation.CreateTimestampType == nil {
			break
		}

		args, err := ec.field_Mutation_createTimestampType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTimestampType(childComplexity, args["timestampTypeInput"].(internal.InputTimestampType)), true

	case "Mutation.deleteApiClient":
		if e.complexity.Mutation.DeleteAPIClient == nil {
			break
		}

		args, err := ec.field_Mutation_deleteApiClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAPIClient(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAccount":
		if e.complexity.Mutation.DeleteAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccount(childComplexity, args["deleteToken"].(string)), true

	case "Mutation.deleteAccountRequest":
		if e.complexity.Mutation.DeleteAccountRequest == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccountRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccountRequest(childComplexity, args["passwordHash"].(string)), true

	case "Mutation.deleteEpisode":
		if e.complexity.Mutation.DeleteEpisode == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEpisode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEpisode(childComplexity, args["episodeId"].(*uuid.UUID)), true

	case "Mutation.deleteEpisodeUrl":
		if e.complexity.Mutation.DeleteEpisodeURL == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEpisodeUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEpisodeURL(childComplexity, args["episodeUrl"].(string)), true

	case "Mutation.deleteShow":
		if e.complexity.Mutation.DeleteShow == nil {
			break
		}

		args, err := ec.field_Mutation_deleteShow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteShow(childComplexity, args["showId"].(*uuid.UUID)), true

	case "Mutation.deleteShowAdmin":
		if e.complexity.Mutation.DeleteShowAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_deleteShowAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteShowAdmin(childComplexity, args["showAdminId"].(*uuid.UUID)), true

	case "Mutation.deleteTemplate":
		if e.complexity.Mutation.DeleteTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTemplate(childComplexity, args["templateId"].(*uuid.UUID)), true

	case "Mutation.deleteTimestamp":
		if e.complexity.Mutation.DeleteTimestamp == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTimestamp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTimestamp(childComplexity, args["timestampId"].(*uuid.UUID)), true

	case "Mutation.deleteTimestampType":
		if e.complexity.Mutation.DeleteTimestampType == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTimestampType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTimestampType(childComplexity, args["timestampTypeId"].(*uuid.UUID)), true

	case "Mutation.removeTimestampFromTemplate":
		if e.complexity.Mutation.RemoveTimestampFromTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_removeTimestampFromTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveTimestampFromTemplate(childComplexity, args["templateTimestamp"].(internal.InputTemplateTimestamp)), true

	case "Mutation.requestPasswordReset":
		if e.complexity.Mutation.RequestPasswordReset == nil {
			break
		}

		args, err := ec.field_Mutation_requestPasswordReset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestPasswordReset(childComplexity, args["recaptchaResponse"].(string), args["email"].(string)), true

	case "Mutation.resendVerificationEmail":
		if e.complexity.Mutation.ResendVerificationEmail == nil {
			break
		}

		args, err := ec.field_Mutation_resendVerificationEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResendVerificationEmail(childComplexity, args["recaptchaResponse"].(string)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["passwordResetToken"].(string), args["newPassword"].(string), args["confirmNewPassword"].(string)), true

	case "Mutation.savePreferences":
		if e.complexity.Mutation.SavePreferences == nil {
			break
		}

		args, err := ec.field_Mutation_savePreferences_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePreferences(childComplexity, args["preferences"].(map[string]interface{})), true

	case "Mutation.updateApiClient":
		if e.complexity.Mutation.UpdateAPIClient == nil {
			break
		}

		args, err := ec.field_Mutation_updateApiClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAPIClient(childComplexity, args["id"].(string), args["changes"].(map[string]interface{})), true

	case "Mutation.updateEpisode":
		if e.complexity.Mutation.UpdateEpisode == nil {
			break
		}

		args, err := ec.field_Mutation_updateEpisode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEpisode(childComplexity, args["episodeId"].(*uuid.UUID), args["newEpisode"].(internal.InputEpisode)), true

	case "Mutation.updateEpisodeUrl":
		if e.complexity.Mutation.UpdateEpisodeURL == nil {
			break
		}

		args, err := ec.field_Mutation_updateEpisodeUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEpisodeURL(childComplexity, args["episodeUrl"].(string), args["newEpisodeUrl"].(internal.InputEpisodeURL)), true

	case "Mutation.updateShow":
		if e.complexity.Mutation.UpdateShow == nil {
			break
		}

		args, err := ec.field_Mutation_updateShow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateShow(childComplexity, args["showId"].(*uuid.UUID), args["newShow"].(internal.InputShow)), true

	case "Mutation.updateTemplate":
		if e.complexity.Mutation.UpdateTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTemplate(childComplexity, args["templateId"].(*uuid.UUID), args["newTemplate"].(internal.InputTemplate)), true

	case "Mutation.updateTimestamp":
		if e.complexity.Mutation.UpdateTimestamp == nil {
			break
		}

		args, err := ec.field_Mutation_updateTimestamp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTimestamp(childComplexity, args["timestampId"].(*uuid.UUID), args["newTimestamp"].(internal.InputTimestamp)), true

	case "Mutation.updateTimestampType":
		if e.complexity.Mutation.UpdateTimestampType == nil {
			break
		}

		args, err := ec.field_Mutation_updateTimestampType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTimestampType(childComplexity, args["timestampTypeId"].(*uuid.UUID), args["newTimestampType"].(internal.InputTimestampType)), true

	case "Mutation.updateTimestamps":
		if e.complexity.Mutation.UpdateTimestamps == nil {
			break
		}

		args, err := ec.field_Mutation_updateTimestamps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTimestamps(childComplexity, args["create"].([]*internal.InputTimestampOn), args["update"].([]*internal.InputExistingTimestamp), args["delete"].([]*uuid.UUID)), true

	case "Mutation.verifyEmailAddress":
		if e.complexity.Mutation.VerifyEmailAddress == nil {
			break
		}

		args, err := ec.field_Mutation_verifyEmailAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyEmailAddress(childComplexity, args["validationToken"].(string)), true

	case "Preferences.colorTheme":
		if e.complexity.Preferences.ColorTheme == nil {
			break
		}

		return e.complexity.Preferences.ColorTheme(childComplexity), true

	case "Preferences.createdAt":
		if e.complexity.Preferences.CreatedAt == nil {
			break
		}

		return e.complexity.Preferences.CreatedAt(childComplexity), true

	case "Preferences.deletedAt":
		if e.complexity.Preferences.DeletedAt == nil {
			break
		}

		return e.complexity.Preferences.DeletedAt(childComplexity), true

	case "Preferences.enableAutoPlay":
		if e.complexity.Preferences.EnableAutoPlay == nil {
			break
		}

		return e.complexity.Preferences.EnableAutoPlay(childComplexity), true

	case "Preferences.enableAutoSkip":
		if e.complexity.Preferences.EnableAutoSkip == nil {
			break
		}

		return e.complexity.Preferences.EnableAutoSkip(childComplexity), true

	case "Preferences.hideTimelineWhenMinimized":
		if e.complexity.Preferences.HideTimelineWhenMinimized == nil {
			break
		}

		return e.complexity.Preferences.HideTimelineWhenMinimized(childComplexity), true

	case "Preferences.id":
		if e.complexity.Preferences.ID == nil {
			break
		}

		return e.complexity.Preferences.ID(childComplexity), true

	case "Preferences.minimizeToolbarWhenEditing":
		if e.complexity.Preferences.MinimizeToolbarWhenEditing == nil {
			break
		}

		return e.complexity.Preferences.MinimizeToolbarWhenEditing(childComplexity), true

	case "Preferences.skipBranding":
		if e.complexity.Preferences.SkipBranding == nil {
			break
		}

		return e.complexity.Preferences.SkipBranding(childComplexity), true

	case "Preferences.skipCanon":
		if e.complexity.Preferences.SkipCanon == nil {
			break
		}

		return e.complexity.Preferences.SkipCanon(childComplexity), true

	case "Preferences.skipCredits":
		if e.complexity.Preferences.SkipCredits == nil {
			break
		}

		return e.complexity.Preferences.SkipCredits(childComplexity), true

	case "Preferences.skipFiller":
		if e.complexity.Preferences.SkipFiller == nil {
			break
		}

		return e.complexity.Preferences.SkipFiller(childComplexity), true

	case "Preferences.skipIntros":
		if e.complexity.Preferences.SkipIntros == nil {
			break
		}

		return e.complexity.Preferences.SkipIntros(childComplexity), true

	case "Preferences.skipMixedCredits":
		if e.complexity.Preferences.SkipMixedCredits == nil {
			break
		}

		return e.complexity.Preferences.SkipMixedCredits(childComplexity), true

	case "Preferences.skipMixedIntros":
		if e.complexity.Preferences.SkipMixedIntros == nil {
			break
		}

		return e.complexity.Preferences.SkipMixedIntros(childComplexity), true

	case "Preferences.skipNewCredits":
		if e.complexity.Preferences.SkipNewCredits == nil {
			break
		}

		return e.complexity.Preferences.SkipNewCredits(childComplexity), true

	case "Preferences.skipNewIntros":
		if e.complexity.Preferences.SkipNewIntros == nil {
			break
		}

		return e.complexity.Preferences.SkipNewIntros(childComplexity), true

	case "Preferences.skipPreview":
		if e.complexity.Preferences.SkipPreview == nil {
			break
		}

		return e.complexity.Preferences.SkipPreview(childComplexity), true

	case "Preferences.skipRecaps":
		if e.complexity.Preferences.SkipRecaps == nil {
			break
		}

		return e.complexity.Preferences.SkipRecaps(childComplexity), true

	case "Preferences.skipTitleCard":
		if e.complexity.Preferences.SkipTitleCard == nil {
			break
		}

		return e.complexity.Preferences.SkipTitleCard(childComplexity), true

	case "Preferences.skipTransitions":
		if e.complexity.Preferences.SkipTransitions == nil {
			break
		}

		return e.complexity.Preferences.SkipTransitions(childComplexity), true

	case "Preferences.updatedAt":
		if e.complexity.Preferences.UpdatedAt == nil {
			break
		}

		return e.complexity.Preferences.UpdatedAt(childComplexity), true

	case "Preferences.user":
		if e.complexity.Preferences.User == nil {
			break
		}

		return e.complexity.Preferences.User(childComplexity), true

	case "Preferences.userId":
		if e.complexity.Preferences.UserID == nil {
			break
		}

		return e.complexity.Preferences.UserID(childComplexity), true

	case "Query.account":
		if e.complexity.Query.Account == nil {
			break
		}

		return e.complexity.Query.Account(childComplexity), true

	case "Query.allTimestampTypes":
		if e.complexity.Query.AllTimestampTypes == nil {
			break
		}

		return e.complexity.Query.AllTimestampTypes(childComplexity), true

	case "Query.findApiClient":
		if e.complexity.Query.FindAPIClient == nil {
			break
		}

		args, err := ec.field_Query_findApiClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindAPIClient(childComplexity, args["id"].(string)), true

	case "Query.findEpisode":
		if e.complexity.Query.FindEpisode == nil {
			break
		}

		args, err := ec.field_Query_findEpisode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindEpisode(childComplexity, args["episodeId"].(*uuid.UUID)), true

	case "Query.findEpisodeByName":
		if e.complexity.Query.FindEpisodeByName == nil {
			break
		}

		args, err := ec.field_Query_findEpisodeByName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindEpisodeByName(childComplexity, args["name"].(string)), true

	case "Query.findEpisodeUrl":
		if e.complexity.Query.FindEpisodeURL == nil {
			break
		}

		args, err := ec.field_Query_findEpisodeUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindEpisodeURL(childComplexity, args["episodeUrl"].(string)), true

	case "Query.findEpisodeUrlsByEpisodeId":
		if e.complexity.Query.FindEpisodeUrlsByEpisodeID == nil {
			break
		}

		args, err := ec.field_Query_findEpisodeUrlsByEpisodeId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindEpisodeUrlsByEpisodeID(childComplexity, args["episodeId"].(*uuid.UUID)), true

	case "Query.findEpisodesByShowId":
		if e.complexity.Query.FindEpisodesByShowID == nil {
			break
		}

		args, err := ec.field_Query_findEpisodesByShowId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindEpisodesByShowID(childComplexity, args["showId"].(*uuid.UUID)), true

	case "Query.findShow":
		if e.complexity.Query.FindShow == nil {
			break
		}

		args, err := ec.field_Query_findShow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindShow(childComplexity, args["showId"].(*uuid.UUID)), true

	case "Query.findShowAdmin":
		if e.complexity.Query.FindShowAdmin == nil {
			break
		}

		args, err := ec.field_Query_findShowAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindShowAdmin(childComplexity, args["showAdminId"].(*uuid.UUID)), true

	case "Query.findShowAdminsByShowId":
		if e.complexity.Query.FindShowAdminsByShowID == nil {
			break
		}

		args, err := ec.field_Query_findShowAdminsByShowId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindShowAdminsByShowID(childComplexity, args["showId"].(*uuid.UUID)), true

	case "Query.findShowAdminsByUserId":
		if e.complexity.Query.FindShowAdminsByUserID == nil {
			break
		}

		args, err := ec.field_Query_findShowAdminsByUserId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindShowAdminsByUserID(childComplexity, args["userId"].(*uuid.UUID)), true

	case "Query.findTemplate":
		if e.complexity.Query.FindTemplate == nil {
			break
		}

		args, err := ec.field_Query_findTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTemplate(childComplexity, args["templateId"].(*uuid.UUID)), true

	case "Query.findTemplateByDetails":
		if e.complexity.Query.FindTemplateByDetails == nil {
			break
		}

		args, err := ec.field_Query_findTemplateByDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTemplateByDetails(childComplexity, args["episodeId"].(*uuid.UUID), args["showName"].(*string), args["season"].(*string)), true

	case "Query.findTemplatesByShowId":
		if e.complexity.Query.FindTemplatesByShowID == nil {
			break
		}

		args, err := ec.field_Query_findTemplatesByShowId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTemplatesByShowID(childComplexity, args["showId"].(*uuid.UUID)), true

	case "Query.findTimestamp":
		if e.complexity.Query.FindTimestamp == nil {
			break
		}

		args, err := ec.field_Query_findTimestamp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTimestamp(childComplexity, args["timestampId"].(*uuid.UUID)), true

	case "Query.findTimestampType":
		if e.complexity.Query.FindTimestampType == nil {
			break
		}

		args, err := ec.field_Query_findTimestampType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTimestampType(childComplexity, args["timestampTypeId"].(*uuid.UUID)), true

	case "Query.findTimestampsByEpisodeId":
		if e.complexity.Query.FindTimestampsByEpisodeID == nil {
			break
		}

		args, err := ec.field_Query_findTimestampsByEpisodeId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindTimestampsByEpisodeID(childComplexity, args["episodeId"].(*uuid.UUID)), true

	case "Query.findUser":
		if e.complexity.Query.FindUser == nil {
			break
		}

		args, err := ec.field_Query_findUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindUser(childComplexity, args["userId"].(*uuid.UUID)), true

	case "Query.findUserByUsername":
		if e.complexity.Query.FindUserByUsername == nil {
			break
		}

		args, err := ec.field_Query_findUserByUsername_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindUserByUsername(childComplexity, args["username"].(string)), true

	case "Query.login":
		if e.complexity.Query.Login == nil {
			break
		}

		args, err := ec.field_Query_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Login(childComplexity, args["usernameEmail"].(string), args["passwordHash"].(string)), true

	case "Query.loginRefresh":
		if e.complexity.Query.LoginRefresh == nil {
			break
		}

		args, err := ec.field_Query_loginRefresh_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LoginRefresh(childComplexity, args["refreshToken"].(string)), true

	case "Query.myApiClients":
		if e.complexity.Query.MyAPIClients == nil {
			break
		}

		args, err := ec.field_Query_myApiClients_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyAPIClients(childComplexity, args["search"].(*string), args["offset"].(*int), args["limit"].(*int), args["sort"].(*string)), true

	case "Query.recentlyAddedEpisodes":
		if e.complexity.Query.RecentlyAddedEpisodes == nil {
			break
		}

		args, err := ec.field_Query_recentlyAddedEpisodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecentlyAddedEpisodes(childComplexity, args["limit"].(*int), args["offset"].(*int)), true

	case "Query.searchEpisodes":
		if e.complexity.Query.SearchEpisodes == nil {
			break
		}

		args, err := ec.field_Query_searchEpisodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchEpisodes(childComplexity, args["search"].(*string), args["showId"].(*uuid.UUID), args["offset"].(*int), args["limit"].(*int), args["sort"].(*string)), true

	case "Query.searchShows":
		if e.complexity.Query.SearchShows == nil {
			break
		}

		args, err := ec.field_Query_searchShows_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchShows(childComplexity, args["search"].(*string), args["offset"].(*int), args["limit"].(*int), args["sort"].(*string)), true

	case "Show.admins":
		if e.complexity.Show.Admins == nil {
			break
		}

		return e.complexity.Show.Admins(childComplexity), true

	case "Show.createdAt":
		if e.complexity.Show.CreatedAt == nil {
			break
		}

		return e.complexity.Show.CreatedAt(childComplexity), true

	case "Show.createdBy":
		if e.complexity.Show.CreatedBy == nil {
			break
		}

		return e.complexity.Show.CreatedBy(childComplexity), true

	case "Show.createdByUserId":
		if e.complexity.Show.CreatedByUserID == nil {
			break
		}

		return e.complexity.Show.CreatedByUserID(childComplexity), true

	case "Show.deletedAt":
		if e.complexity.Show.DeletedAt == nil {
			break
		}

		return e.complexity.Show.DeletedAt(childComplexity), true

	case "Show.deletedBy":
		if e.complexity.Show.DeletedBy == nil {
			break
		}

		return e.complexity.Show.DeletedBy(childComplexity), true

	case "Show.deletedByUserId":
		if e.complexity.Show.DeletedByUserID == nil {
			break
		}

		return e.complexity.Show.DeletedByUserID(childComplexity), true

	case "Show.episodeCount":
		if e.complexity.Show.EpisodeCount == nil {
			break
		}

		return e.complexity.Show.EpisodeCount(childComplexity), true

	case "Show.episodes":
		if e.complexity.Show.Episodes == nil {
			break
		}

		return e.complexity.Show.Episodes(childComplexity), true

	case "Show.id":
		if e.complexity.Show.ID == nil {
			break
		}

		return e.complexity.Show.ID(childComplexity), true

	case "Show.image":
		if e.complexity.Show.Image == nil {
			break
		}

		return e.complexity.Show.Image(childComplexity), true

	case "Show.name":
		if e.complexity.Show.Name == nil {
			break
		}

		return e.complexity.Show.Name(childComplexity), true

	case "Show.originalName":
		if e.complexity.Show.OriginalName == nil {
			break
		}

		return e.complexity.Show.OriginalName(childComplexity), true

	case "Show.seasonCount":
		if e.complexity.Show.SeasonCount == nil {
			break
		}

		return e.complexity.Show.SeasonCount(childComplexity), true

	case "Show.templates":
		if e.complexity.Show.Templates == nil {
			break
		}

		return e.complexity.Show.Templates(childComplexity), true

	case "Show.updatedAt":
		if e.complexity.Show.UpdatedAt == nil {
			break
		}

		return e.complexity.Show.UpdatedAt(childComplexity), true

	case "Show.updatedBy":
		if e.complexity.Show.UpdatedBy == nil {
			break
		}

		return e.complexity.Show.UpdatedBy(childComplexity), true

	case "Show.updatedByUserId":
		if e.complexity.Show.UpdatedByUserID == nil {
			break
		}

		return e.complexity.Show.UpdatedByUserID(childComplexity), true

	case "Show.website":
		if e.complexity.Show.Website == nil {
			break
		}

		return e.complexity.Show.Website(childComplexity), true

	case "ShowAdmin.createdAt":
		if e.complexity.ShowAdmin.CreatedAt == nil {
			break
		}

		return e.complexity.ShowAdmin.CreatedAt(childComplexity), true

	case "ShowAdmin.createdBy":
		if e.complexity.ShowAdmin.CreatedBy == nil {
			break
		}

		return e.complexity.ShowAdmin.CreatedBy(childComplexity), true

	case "ShowAdmin.createdByUserId":
		if e.complexity.ShowAdmin.CreatedByUserID == nil {
			break
		}

		return e.complexity.ShowAdmin.CreatedByUserID(childComplexity), true

	case "ShowAdmin.deletedAt":
		if e.complexity.ShowAdmin.DeletedAt == nil {
			break
		}

		return e.complexity.ShowAdmin.DeletedAt(childComplexity), true

	case "ShowAdmin.deletedBy":
		if e.complexity.ShowAdmin.DeletedBy == nil {
			break
		}

		return e.complexity.ShowAdmin.DeletedBy(childComplexity), true

	case "ShowAdmin.deletedByUserId":
		if e.complexity.ShowAdmin.DeletedByUserID == nil {
			break
		}

		return e.complexity.ShowAdmin.DeletedByUserID(childComplexity), true

	case "ShowAdmin.id":
		if e.complexity.ShowAdmin.ID == nil {
			break
		}

		return e.complexity.ShowAdmin.ID(childComplexity), true

	case "ShowAdmin.show":
		if e.complexity.ShowAdmin.Show == nil {
			break
		}

		return e.complexity.ShowAdmin.Show(childComplexity), true

	case "ShowAdmin.showId":
		if e.complexity.ShowAdmin.ShowID == nil {
			break
		}

		return e.complexity.ShowAdmin.ShowID(childComplexity), true

	case "ShowAdmin.updatedAt":
		if e.complexity.ShowAdmin.UpdatedAt == nil {
			break
		}

		return e.complexity.ShowAdmin.UpdatedAt(childComplexity), true

	case "ShowAdmin.updatedBy":
		if e.complexity.ShowAdmin.UpdatedBy == nil {
			break
		}

		return e.complexity.ShowAdmin.UpdatedBy(childComplexity), true

	case "ShowAdmin.updatedByUserId":
		if e.complexity.ShowAdmin.UpdatedByUserID == nil {
			break
		}

		return e.complexity.ShowAdmin.UpdatedByUserID(childComplexity), true

	case "ShowAdmin.user":
		if e.complexity.ShowAdmin.User == nil {
			break
		}

		return e.complexity.ShowAdmin.User(childComplexity), true

	case "ShowAdmin.userId":
		if e.complexity.ShowAdmin.UserID == nil {
			break
		}

		return e.complexity.ShowAdmin.UserID(childComplexity), true

	case "Template.createdAt":
		if e.complexity.Template.CreatedAt == nil {
			break
		}

		return e.complexity.Template.CreatedAt(childComplexity), true

	case "Template.createdBy":
		if e.complexity.Template.CreatedBy == nil {
			break
		}

		return e.complexity.Template.CreatedBy(childComplexity), true

	case "Template.createdByUserId":
		if e.complexity.Template.CreatedByUserID == nil {
			break
		}

		return e.complexity.Template.CreatedByUserID(childComplexity), true

	case "Template.deletedAt":
		if e.complexity.Template.DeletedAt == nil {
			break
		}

		return e.complexity.Template.DeletedAt(childComplexity), true

	case "Template.deletedBy":
		if e.complexity.Template.DeletedBy == nil {
			break
		}

		return e.complexity.Template.DeletedBy(childComplexity), true

	case "Template.deletedByUserId":
		if e.complexity.Template.DeletedByUserID == nil {
			break
		}

		return e.complexity.Template.DeletedByUserID(childComplexity), true

	case "Template.id":
		if e.complexity.Template.ID == nil {
			break
		}

		return e.complexity.Template.ID(childComplexity), true

	case "Template.seasons":
		if e.complexity.Template.Seasons == nil {
			break
		}

		return e.complexity.Template.Seasons(childComplexity), true

	case "Template.show":
		if e.complexity.Template.Show == nil {
			break
		}

		return e.complexity.Template.Show(childComplexity), true

	case "Template.showId":
		if e.complexity.Template.ShowID == nil {
			break
		}

		return e.complexity.Template.ShowID(childComplexity), true

	case "Template.sourceEpisode":
		if e.complexity.Template.SourceEpisode == nil {
			break
		}

		return e.complexity.Template.SourceEpisode(childComplexity), true

	case "Template.sourceEpisodeId":
		if e.complexity.Template.SourceEpisodeID == nil {
			break
		}

		return e.complexity.Template.SourceEpisodeID(childComplexity), true

	case "Template.timestampIds":
		if e.complexity.Template.TimestampIds == nil {
			break
		}

		return e.complexity.Template.TimestampIds(childComplexity), true

	case "Template.timestamps":
		if e.complexity.Template.Timestamps == nil {
			break
		}

		return e.complexity.Template.Timestamps(childComplexity), true

	case "Template.type":
		if e.complexity.Template.Type == nil {
			break
		}

		return e.complexity.Template.Type(childComplexity), true

	case "Template.updatedAt":
		if e.complexity.Template.UpdatedAt == nil {
			break
		}

		return e.complexity.Template.UpdatedAt(childComplexity), true

	case "Template.updatedBy":
		if e.complexity.Template.UpdatedBy == nil {
			break
		}

		return e.complexity.Template.UpdatedBy(childComplexity), true

	case "Template.updatedByUserId":
		if e.complexity.Template.UpdatedByUserID == nil {
			break
		}

		return e.complexity.Template.UpdatedByUserID(childComplexity), true

	case "TemplateTimestamp.template":
		if e.complexity.TemplateTimestamp.Template == nil {
			break
		}

		return e.complexity.TemplateTimestamp.Template(childComplexity), true

	case "TemplateTimestamp.templateId":
		if e.complexity.TemplateTimestamp.TemplateID == nil {
			break
		}

		return e.complexity.TemplateTimestamp.TemplateID(childComplexity), true

	case "TemplateTimestamp.timestamp":
		if e.complexity.TemplateTimestamp.Timestamp == nil {
			break
		}

		return e.complexity.TemplateTimestamp.Timestamp(childComplexity), true

	case "TemplateTimestamp.timestampId":
		if e.complexity.TemplateTimestamp.TimestampID == nil {
			break
		}

		return e.complexity.TemplateTimestamp.TimestampID(childComplexity), true

	case "ThirdPartyEpisode.absoluteNumber":
		if e.complexity.ThirdPartyEpisode.AbsoluteNumber == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.AbsoluteNumber(childComplexity), true

	case "ThirdPartyEpisode.baseDuration":
		if e.complexity.ThirdPartyEpisode.BaseDuration == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.BaseDuration(childComplexity), true

	case "ThirdPartyEpisode.id":
		if e.complexity.ThirdPartyEpisode.ID == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.ID(childComplexity), true

	case "ThirdPartyEpisode.name":
		if e.complexity.ThirdPartyEpisode.Name == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.Name(childComplexity), true

	case "ThirdPartyEpisode.number":
		if e.complexity.ThirdPartyEpisode.Number == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.Number(childComplexity), true

	case "ThirdPartyEpisode.season":
		if e.complexity.ThirdPartyEpisode.Season == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.Season(childComplexity), true

	case "ThirdPartyEpisode.show":
		if e.complexity.ThirdPartyEpisode.Show == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.Show(childComplexity), true

	case "ThirdPartyEpisode.showId":
		if e.complexity.ThirdPartyEpisode.ShowID == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.ShowID(childComplexity), true

	case "ThirdPartyEpisode.source":
		if e.complexity.ThirdPartyEpisode.Source == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.Source(childComplexity), true

	case "ThirdPartyEpisode.timestamps":
		if e.complexity.ThirdPartyEpisode.Timestamps == nil {
			break
		}

		return e.complexity.ThirdPartyEpisode.Timestamps(childComplexity), true

	case "ThirdPartyShow.createdAt":
		if e.complexity.ThirdPartyShow.CreatedAt == nil {
			break
		}

		return e.complexity.ThirdPartyShow.CreatedAt(childComplexity), true

	case "ThirdPartyShow.name":
		if e.complexity.ThirdPartyShow.Name == nil {
			break
		}

		return e.complexity.ThirdPartyShow.Name(childComplexity), true

	case "ThirdPartyShow.updatedAt":
		if e.complexity.ThirdPartyShow.UpdatedAt == nil {
			break
		}

		return e.complexity.ThirdPartyShow.UpdatedAt(childComplexity), true

	case "ThirdPartyTimestamp.at":
		if e.complexity.ThirdPartyTimestamp.At == nil {
			break
		}

		return e.complexity.ThirdPartyTimestamp.At(childComplexity), true

	case "ThirdPartyTimestamp.id":
		if e.complexity.ThirdPartyTimestamp.ID == nil {
			break
		}

		return e.complexity.ThirdPartyTimestamp.ID(childComplexity), true

	case "ThirdPartyTimestamp.type":
		if e.complexity.ThirdPartyTimestamp.Type == nil {
			break
		}

		return e.complexity.ThirdPartyTimestamp.Type(childComplexity), true

	case "ThirdPartyTimestamp.typeId":
		if e.complexity.ThirdPartyTimestamp.TypeID == nil {
			break
		}

		return e.complexity.ThirdPartyTimestamp.TypeID(childComplexity), true

	case "Timestamp.at":
		if e.complexity.Timestamp.At == nil {
			break
		}

		return e.complexity.Timestamp.At(childComplexity), true

	case "Timestamp.createdAt":
		if e.complexity.Timestamp.CreatedAt == nil {
			break
		}

		return e.complexity.Timestamp.CreatedAt(childComplexity), true

	case "Timestamp.createdBy":
		if e.complexity.Timestamp.CreatedBy == nil {
			break
		}

		return e.complexity.Timestamp.CreatedBy(childComplexity), true

	case "Timestamp.createdByUserId":
		if e.complexity.Timestamp.CreatedByUserID == nil {
			break
		}

		return e.complexity.Timestamp.CreatedByUserID(childComplexity), true

	case "Timestamp.deletedAt":
		if e.complexity.Timestamp.DeletedAt == nil {
			break
		}

		return e.complexity.Timestamp.DeletedAt(childComplexity), true

	case "Timestamp.deletedBy":
		if e.complexity.Timestamp.DeletedBy == nil {
			break
		}

		return e.complexity.Timestamp.DeletedBy(childComplexity), true

	case "Timestamp.deletedByUserId":
		if e.complexity.Timestamp.DeletedByUserID == nil {
			break
		}

		return e.complexity.Timestamp.DeletedByUserID(childComplexity), true

	case "Timestamp.episode":
		if e.complexity.Timestamp.Episode == nil {
			break
		}

		return e.complexity.Timestamp.Episode(childComplexity), true

	case "Timestamp.episodeId":
		if e.complexity.Timestamp.EpisodeID == nil {
			break
		}

		return e.complexity.Timestamp.EpisodeID(childComplexity), true

	case "Timestamp.id":
		if e.complexity.Timestamp.ID == nil {
			break
		}

		return e.complexity.Timestamp.ID(childComplexity), true

	case "Timestamp.source":
		if e.complexity.Timestamp.Source == nil {
			break
		}

		return e.complexity.Timestamp.Source(childComplexity), true

	case "Timestamp.type":
		if e.complexity.Timestamp.Type == nil {
			break
		}

		return e.complexity.Timestamp.Type(childComplexity), true

	case "Timestamp.typeId":
		if e.complexity.Timestamp.TypeID == nil {
			break
		}

		return e.complexity.Timestamp.TypeID(childComplexity), true

	case "Timestamp.updatedAt":
		if e.complexity.Timestamp.UpdatedAt == nil {
			break
		}

		return e.complexity.Timestamp.UpdatedAt(childComplexity), true

	case "Timestamp.updatedBy":
		if e.complexity.Timestamp.UpdatedBy == nil {
			break
		}

		return e.complexity.Timestamp.UpdatedBy(childComplexity), true

	case "Timestamp.updatedByUserId":
		if e.complexity.Timestamp.UpdatedByUserID == nil {
			break
		}

		return e.complexity.Timestamp.UpdatedByUserID(childComplexity), true

	case "TimestampType.createdAt":
		if e.complexity.TimestampType.CreatedAt == nil {
			break
		}

		return e.complexity.TimestampType.CreatedAt(childComplexity), true

	case "TimestampType.createdBy":
		if e.complexity.TimestampType.CreatedBy == nil {
			break
		}

		return e.complexity.TimestampType.CreatedBy(childComplexity), true

	case "TimestampType.createdByUserId":
		if e.complexity.TimestampType.CreatedByUserID == nil {
			break
		}

		return e.complexity.TimestampType.CreatedByUserID(childComplexity), true

	case "TimestampType.deletedAt":
		if e.complexity.TimestampType.DeletedAt == nil {
			break
		}

		return e.complexity.TimestampType.DeletedAt(childComplexity), true

	case "TimestampType.deletedBy":
		if e.complexity.TimestampType.DeletedBy == nil {
			break
		}

		return e.complexity.TimestampType.DeletedBy(childComplexity), true

	case "TimestampType.deletedByUserId":
		if e.complexity.TimestampType.DeletedByUserID == nil {
			break
		}

		return e.complexity.TimestampType.DeletedByUserID(childComplexity), true

	case "TimestampType.description":
		if e.complexity.TimestampType.Description == nil {
			break
		}

		return e.complexity.TimestampType.Description(childComplexity), true

	case "TimestampType.id":
		if e.complexity.TimestampType.ID == nil {
			break
		}

		return e.complexity.TimestampType.ID(childComplexity), true

	case "TimestampType.name":
		if e.complexity.TimestampType.Name == nil {
			break
		}

		return e.complexity.TimestampType.Name(childComplexity), true

	case "TimestampType.updatedAt":
		if e.complexity.TimestampType.UpdatedAt == nil {
			break
		}

		return e.complexity.TimestampType.UpdatedAt(childComplexity), true

	case "TimestampType.updatedBy":
		if e.complexity.TimestampType.UpdatedBy == nil {
			break
		}

		return e.complexity.TimestampType.UpdatedBy(childComplexity), true

	case "TimestampType.updatedByUserId":
		if e.complexity.TimestampType.UpdatedByUserID == nil {
			break
		}

		return e.complexity.TimestampType.UpdatedByUserID(childComplexity), true

	case "UpdatedTimestamps.created":
		if e.complexity.UpdatedTimestamps.Created == nil {
			break
		}

		return e.complexity.UpdatedTimestamps.Created(childComplexity), true

	case "UpdatedTimestamps.deleted":
		if e.complexity.UpdatedTimestamps.Deleted == nil {
			break
		}

		return e.complexity.UpdatedTimestamps.Deleted(childComplexity), true

	case "UpdatedTimestamps.updated":
		if e.complexity.UpdatedTimestamps.Updated == nil {
			break
		}

		return e.complexity.UpdatedTimestamps.Updated(childComplexity), true

	case "User.adminOfShows":
		if e.complexity.User.AdminOfShows == nil {
			break
		}

		return e.complexity.User.AdminOfShows(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.profileUrl":
		if e.complexity.User.ProfileURL == nil {
			break
		}

		return e.complexity.User.ProfileURL(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "api/arguments.graphqls", Input: `input InputExistingTimestamp {
  "The id of the timestamp you want to modify"
  id: ID!
  "The new values for the timestamp"
  timestamp: InputTimestamp!
}

input InputTimestampOn {
  "The episode id the timestamp will be created on"
  episodeId: ID!
  "The new values for the timestamp"
  timestamp: InputTimestamp!
}
`, BuiltIn: false},
	{Name: "api/directives.graphqls", Input: `"Check if the user is signed in"
directive @authenticated on FIELD_DEFINITION

"Checks if the user is signed in and has a given role"
directive @hasRole(role: Role!) on FIELD_DEFINITION

"Checks if the user is signed in and is an admin of the show being operated on"
directive @isShowAdmin on ARGUMENT_DEFINITION
`, BuiltIn: false},
	{Name: "api/enums.graphqls", Input: `"""
A user's role in the system. Higher roles allow a user write access to certain data that a normal
user would not. Some queries and mutations are only allowed by certain roles
"""
enum Role {
  "Highest role. Has super user access to all queries and mutations"
  DEV
  "Administrator role. Has some elevated permissions"
  ADMIN
  "Basic role. Has no elevated permissions"
  USER
}

"""
Which of the supported services the ` + "`" + `EpisodeUrl` + "`" + ` was created for. This is a simple enum that allows
for simple checks, but this data can also be pulled from the url in the case of UNKNOWN
"""
enum EpisodeSource {
  "Data came from an external source"
  UNKNOWN
  "Data is from <vrv.co>"
  VRV
  "Data is from <funimation.com>"
  FUNIMATION
  "Data is from <crunchyroll.com> and <beta.crunchyroll.com>"
  CRUNCHYROLL
}

"Where a timestamp originated from"
enum TimestampSource {
  ANIME_SKIP
  BETTER_VRV
}

"The scope that a template applies to"
enum TemplateType {
  "The template is loaded for all episodes of a given show"
  SHOW
  "The template is loaded for episodes of a given show where their season is included in ` + "`" + `Template.seasons` + "`" + `"
  SEASONS
}

"Color theme the user prefers"
enum ColorTheme {
  "Change to match where you're watching"
  PER_SERVICE
  ANIME_SKIP_BLUE
  VRV_YELLOW
  FUNIMATION_PURPLE
  CRUNCHYROLL_ORANGE
}
`, BuiltIn: false},
	{Name: "api/models.graphqls", Input: `"""
The base model has all the fields you would expect a fully fleshed out item in the database would
have. It is used to track who create, updated, and deleted items
"""
interface BaseModel {
  "Unique, v4 UUID. When asked for an ` + "`" + `id` + "`" + ` of an object, use this field"
  id: ID!
  "Time that the item was created at"
  createdAt: Time!
  "The user's ` + "`" + `id` + "`" + ` that created the item"
  createdByUserId: ID!
  "The entire user that created the item"
  createdBy: User!
  "Time that the item was updated at"
  updatedAt: Time!
  "The user's ` + "`" + `id` + "`" + ` that last updated the item"
  updatedByUserId: ID!
  "The entire user that last updated the item"
  updatedBy: User!
  "Time that the item was updated at. If this value is present, the item is considered deleted"
  deletedAt: Time
  "The user's ` + "`" + `id` + "`" + ` that deleted the item"
  deletedByUserId: ID
  "The entire user that deleted the item"
  deletedBy: User
}

"""
Basic information about an episode, including season, numbers, a list of timestamps, and urls that
it can be watched at
"""
type Episode implements BaseModel {
  id: ID!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User

  """
  The season number that this episode belongs to

  ### Examples:

  - "1"
  - "1 Directors Cut"
  - "2"
  - "Movies"
  """
  season: String
  """
  The episode number in the current season

  ### Examples:

  - "1"
  - "2"
  - "5.5"
  - "OVA 1"
  """
  number: String
  """
  The absolute episode number out of all the episodes of the show. Generally only regular episodes
  should have this field
  """
  absoluteNumber: String
  """
  The duration of the episode's first url, which can be used to calculate a suggested offset for new
  episode urls. Episodes at different URLs have different branding intros, and that difference can
  be computed using: ` + "`" + `EpisodeUrl.duration - Episode.baseDuration` + "`" + `
  Generally, this works because each service has it's own branding at the beginning of the show, not
  at the end of it
  """
  baseDuration: Float!
  "The episode's name"
  name: String
  "The show that the episode belongs to"
  show: Show!
  "The id of the show that the episode belongs to"
  showId: ID!
  """
  The list of current timestamps.

  Timestamps are apart apart of the ` + "`" + `Episode` + "`" + ` instead of the ` + "`" + `EpisodeUrl` + "`" + ` so that they can be shared
  between urls and not need duplicate data
  """
  timestamps: [Timestamp!]!
  "The list of urls and services that the episode can be accessed from"
  urls: [EpisodeUrl!]!
  "If the episode is the source episode for a ` + "`" + `Template` + "`" + `, this will resolve to that template"
  template: Template
}

"""
Episode info provided by a third party. See ` + "`" + `Episode` + "`" + ` for a description of each field.

When creating data based on this type, fill out and post an episode, then timestamps based on the
data here. All fields will map 1 to 1 with the exception of ` + "`" + `source` + "`" + `. Since a source belongs to a
episode for third party data, but belongs to timestamps in Anime Skip, the source should be
propagated down to each of the timestamps. This way when more timestamps are added, a episode can
have multiple timestamp sources.

> Make sure to fill out the ` + "`" + `source` + "`" + ` field so that original owner of the timestamp is maintained
"""
type ThirdPartyEpisode {
  "The Anime Skip ` + "`" + `Episode.id` + "`" + ` when the ` + "`" + `source` + "`" + ` is ` + "`" + `ANIME_SKIP` + "`" + `, otherwise this is null"
  id: ID
  season: String
  number: String
  absoluteNumber: String
  baseDuration: Float!
  name: String
  source: TimestampSource
  timestamps: [ThirdPartyTimestamp!]!
  "The id of the show from the third party"
  showId: String!
  show: ThirdPartyShow!
}

"Data required to create a new ` + "`" + `Episode` + "`" + `. See ` + "`" + `Episode` + "`" + ` for a description of each field"
input InputEpisode {
  "See ` + "`" + `Episode.season` + "`" + `"
  season: String
  "See ` + "`" + `Episode.number` + "`" + `"
  number: String
  "See ` + "`" + `Episode.absoluteNumber` + "`" + `"
  absoluteNumber: String
  "See ` + "`" + `Episode.name` + "`" + `"
  name: String
  "See ` + "`" + `Episode.baseDuration` + "`" + `"
  baseDuration: Float!
}

"Stores information about what where an episode can be watched from"
type EpisodeUrl {
  """
  The url that would take a user to watch the ` + "`" + `episode` + "`" + `.

  This url should be stripped of all query params.
  """
  url: String!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!

  """
  The length of the episode at this url. For more information on why this field exists, check out
  the ` + "`" + `Episode.baseDuration` + "`" + `. If an ` + "`" + `Episode` + "`" + ` does not have a duration, that ` + "`" + `Episode` + "`" + ` and this
  ` + "`" + `EpisodeUrl` + "`" + ` should be given the same value, and the ` + "`" + `EpisodeUrl.timestampsOffset` + "`" + ` should be set to 0
  """
  duration: Float
  """
  How much a episode's timestamps should be offset for this ` + "`" + `EpisodeUrl` + "`" + `, since different services
  have different branding animations, leading to offsets between services. This field can be edited
  to whatever, but it should be suggested to be ` + "`" + `EpisodeUrl.duration - Episode.baseDuration` + "`" + `.
  It can be positive or negative.
  """
  timestampsOffset: Float
  "The ` + "`" + `Episode.id` + "`" + ` that this url belongs to"
  episodeId: ID!
  "The ` + "`" + `Episode` + "`" + ` that this url belongs to"
  episode: Episode!
  "What service this url points to. This is computed when the ` + "`" + `EpisodeUrl` + "`" + ` is created"
  source: EpisodeSource!
}

"Data required to create a new ` + "`" + `EpisodeUrl` + "`" + `. See ` + "`" + `EpisodeUrl` + "`" + ` for a description of each field"
input InputEpisodeUrl {
  url: String!
  duration: Float
  timestampsOffset: Float
}

"Account info that should only be accessible by the authorized user"
type Account {
  id: ID!
  createdAt: Time!
  deletedAt: Time

  "Unique string slug that is the easy to remember identifier"
  username: String!
  email: String!
  "Url to an image that is the user's profile picture"
  profileUrl: String!
  """
  The linking object that associates a user to the shows they are admins of.

  > This data is also accessible on the ` + "`" + `User` + "`" + ` model. It has been added here for convenience
  """
  adminOfShows: [ShowAdmin!]!

  "If the user's email is verified. Emails must be verified before the user can call a mutation"
  emailVerified: Boolean!
  "The user's administrative role. Most users are ` + "`" + `Role.USER` + "`" + `"
  role: Role!
  "The user's preferences"
  preferences: Preferences!
}

"""
Where all the user preferences are stored. This includes what timestamps the user doesn't want to
watch
"""
type Preferences {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time

  "The ` + "`" + `User.id` + "`" + ` that this preferences object belongs to"
  userId: ID!
  "The ` + "`" + `User` + "`" + ` that the preferences belong to"
  user: User!
  "Whether or not the user wants to automatically skip section. Default: ` + "`" + `true` + "`" + `"
  enableAutoSkip: Boolean!
  "Whether or not the user wants to auto-play the videos. Default: ` + "`" + `true` + "`" + `"
  enableAutoPlay: Boolean!
  """
  Whether or not the bottom toolbar with the video progress and play button is minimized after
  inactivity while editing
  """
  minimizeToolbarWhenEditing: Boolean!
  """
  When false, timeline is pinned to the bottom of the screen after inactivity. When true, it is
  hidden completely
  """
  hideTimelineWhenMinimized: Boolean!
  colorTheme: ColorTheme!

  "Whether or not the user whats to skip branding timestamps. Default: ` + "`" + `true` + "`" + `"
  skipBranding: Boolean!
  "Whether or not the user whats to skip regular intros. Default: ` + "`" + `true` + "`" + `"
  skipIntros: Boolean!
  "Whether or not the user whats to skip the first of an intro. Default: ` + "`" + `false` + "`" + `"
  skipNewIntros: Boolean!
  "Whether or not the user whats to kip intros that have plot progression rather than the standard animation. Default: ` + "`" + `false` + "`" + `"
  skipMixedIntros: Boolean!
  "Whether or not the user whats to skip recaps at the beginning of episodes. Default: ` + "`" + `true` + "`" + `"
  skipRecaps: Boolean!
  "Whether or not the user whats to skip filler content. Default: ` + "`" + `true` + "`" + `"
  skipFiller: Boolean!
  "Whether or not the user whats to skip canon content. Default: ` + "`" + `false` + "`" + `"
  skipCanon: Boolean!
  "Whether or not the user whats to skip commercial transitions. Default: ` + "`" + `true` + "`" + `"
  skipTransitions: Boolean!
  "Whether or not the user whats to skip credits/outros. Default: ` + "`" + `true` + "`" + `"
  skipCredits: Boolean!
  "Whether or not the user whats to skip the first of a credits/outro. Default: ` + "`" + `false` + "`" + `"
  skipNewCredits: Boolean!
  "Whether or not the user whats to skip credits/outros that have plot progression rather than the standard animation. Default: ` + "`" + `false` + "`" + `"
  skipMixedCredits: Boolean!
  "Whether or not to skip the next episode's preview. Default: ` + "`" + `true` + "`" + `"
  skipPreview: Boolean!
  "Whether or not to skip an episode's static title card. Default: ` + "`" + `true` + "`" + `"
  skipTitleCard: Boolean!
}

"""
Data used to update a user's ` + "`" + `Preferences` + "`" + `. See ` + "`" + `Preferences` + "`" + ` for a description of each field. If a
field is not passed or passed as ` + "`" + `null` + "`" + `, it will leave the value as is and skip updating it
"""
input InputPreferences {
  enableAutoSkip: Boolean
  enableAutoPlay: Boolean
  minimizeToolbarWhenEditing: Boolean
  hideTimelineWhenMinimized: Boolean
  colorTheme: ColorTheme

  skipBranding: Boolean
  skipIntros: Boolean
  skipNewIntros: Boolean
  skipMixedIntros: Boolean
  skipRecaps: Boolean
  skipFiller: Boolean
  skipCanon: Boolean
  skipTransitions: Boolean
  skipCredits: Boolean
  skipNewCredits: Boolean
  skipMixedCredits: Boolean
  skipPreview: Boolean
  skipTitleCard: Boolean
}

"A show containing a list of episodes and relevant links"
type Show implements BaseModel {
  id: ID!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User

  """
  The show name

  ### Examples

  - "Death Note"
  - "My Hero Academia"
  """
  name: String!
  """
  The show's original Japanese name

  ### Examples

  - "Desu Nōto"
  - "Boku no Hīrō Akademia"
  """
  originalName: String
  "A link to the anime's official website"
  website: String
  "A link to a show poster"
  image: String
  "The list of admins for the show"
  admins: [ShowAdmin!]!
  "All the episodes that belong to the show"
  episodes: [Episode!]!
  "All the templates that belong to this show"
  templates: [Template!]!

  "How many seasons are associated with this show"
  seasonCount: Int!
  "How many episodes are apart of this show"
  episodeCount: Int!
}

type ThirdPartyShow {
  name: String!
  createdAt: Time
  updatedAt: Time
}

"Data required to create a new ` + "`" + `Show` + "`" + `. See ` + "`" + `Show` + "`" + ` for a description of each field"
input InputShow {
  name: String!
  originalName: String
  website: String
  image: String
}

"""
A list of users that have elevated permissions when making changes to a show, it's episodes, and
timestamps. Show admins are responsible for approving any changes that users might submit.

If a user has the ` + "`" + `ADMIN` + "`" + ` or ` + "`" + `DEV` + "`" + ` roles, they do not need to be show admins to approve changes or
make changes directly. Likewise, if a show doesn't have an admin, the user that create the
show/episode will have temporary access to editing the data until someone becomes that shows admin.

Admins can be created using the API and will soon come to the Anime Skip player/website.
"""
type ShowAdmin implements BaseModel {
  id: ID!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User

  "The ` + "`" + `Show.id` + "`" + ` that the admin has elevated privileges for"
  showId: ID!
  "The ` + "`" + `Show` + "`" + ` that the admin has elevated privileges for"
  show: Show!
  "The ` + "`" + `User.id` + "`" + ` that the admin privileges belong to"
  userId: ID!
  "The ` + "`" + `User` + "`" + ` that the admin privileges belong to"
  user: User!
}

"Data required to create a new ` + "`" + `ShowAdmin` + "`" + `. See ` + "`" + `ShowAdmin` + "`" + ` for a description of each field"
input InputShowAdmin {
  showId: ID!
  userId: ID!
}

type Timestamp implements BaseModel {
  id: ID!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User

  "The actual time the timestamp is at"
  at: Float!
  source: TimestampSource!
  "The id specifying the type the timestamp is"
  typeId: ID!
  """
  The type the timestamp is. This field is a constant string so including it has no effect on
  performance or query complexity.
  """
  type: TimestampType!
  "The ` + "`" + `Episode.id` + "`" + ` that the timestamp belongs to"
  episodeId: ID!
  "The ` + "`" + `Episode` + "`" + ` that the timestamp belongs to"
  episode: Episode!
}

type ThirdPartyTimestamp {
  "The Anime Skip ` + "`" + `Timestamp.id` + "`" + ` when the ` + "`" + `Episode.source` + "`" + ` is ` + "`" + `ANIME_SKIP` + "`" + `, otherwise this is null"
  id: ID
  "The actual time the timestamp is at"
  at: Float!
  "The id specifying the type the timestamp is"
  typeId: ID!
  type: TimestampType!
}

"Data required to create a new ` + "`" + `Timestamp` + "`" + `. See ` + "`" + `Timestamp` + "`" + ` for a description of each field"
input InputTimestamp {
  at: Float!
  typeId: ID!
  source: TimestampSource
}

"""
The type a timestamp can be. This table rarely changes so the values fetched can either be hard
coded or fetch occasionally. Anime Skip website and web extension use hardcoded maps to store this
data, but a third party might want to fetch and cache this instead since you won't know when Anime
Skip adds timestamps
"""
type TimestampType implements BaseModel {
  id: ID!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User

  "The name of the timestamp type"
  name: String!
  "The description for what this type represents"
  description: String!
}

"Data required to create a new ` + "`" + `TimestampType` + "`" + `. See ` + "`" + `TimestampType` + "`" + ` for a description of each field"
input InputTimestampType {
  name: String!
  description: String!
}

"Information about a user that is public. See ` + "`" + `Account` + "`" + ` for a description of each field"
type User {
  id: ID!
  createdAt: Time!
  deletedAt: Time

  username: String!
  profileUrl: String!
  adminOfShows: [ShowAdmin!]!
}

"""
When no timestamps exist for a specific episode, templates are setup to provide fallback timestamps
"""
type Template implements BaseModel {
  id: ID!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User

  "The id of the show that this template is for"
  showId: ID!
  "The show that this template is for"
  show: Show!
  "Specify the scope of the template, if it's for the entire show, or just for a set of seasons"
  type: TemplateType!
  "When the template is for a set of seasons, this is the set of seasons it is applied to"
  seasons: [String!]
  "The id of the episode used to create the template. All the timestamps are from this episode"
  sourceEpisodeId: ID!
  "The episode used to create the template. All the timestamps are from this episode"
  sourceEpisode: Episode!
  "The list of timestamps that are apart of this template"
  timestamps: [Timestamp!]!
  """
  The list of timestamp ids that are apart of this template. Since this is a many-to-many
  relationship, this field will resolve quicker than ` + "`" + `timestamps` + "`" + ` since it doesn't have to do an
  extra join

  This is useful when you already got the episode and timestamps, and you just need to know what
  timestamps are apart of the template
  """
  timestampIds: [ID!]!
}
"Data required to create a new template. See ` + "`" + `Template` + "`" + ` for a description of each field"
input InputTemplate {
  showId: ID!
  type: TemplateType!
  seasons: [String!]
  sourceEpisodeId: ID!
}

"The many to many object that links a timestamp to a template"
type TemplateTimestamp {
  templateId: ID!
  template: Template!
  timestampId: ID!
  timestamp: Timestamp!
}
"Data required to modify the timestamps on a template"
input InputTemplateTimestamp {
  templateId: ID!
  timestampId: ID!
}

type ApiClient {
  id: String!
  createdAt: Time!
  createdByUserId: ID!
  createdBy: User!
  updatedAt: Time!
  updatedByUserId: ID!
  updatedBy: User!
  deletedAt: Time
  deletedByUserId: ID
  deletedBy: User
  "The ID of the user this client belongs to"
  userId: ID!
  "The user this client belongs to"
  user: User!
  appName: String!
  description: String!
  # allowedOrigins: [String!]
  rateLimitRpm: UInt
}

input CreateApiClient {
  appName: String!
  description: String!
  # allowedOrigins: [String!]
}

input ApiClientChanges {
  appName: String
  description: String
  # allowedOrigins: [String!]
  "Rate limits can only be changed by admins"
  rateLimitRpm: UInt
}
`, BuiltIn: false},
	{Name: "api/mutations.graphqls", Input: `type Mutation {
  # Account
  """
  Create a user account. 3rd party applications will not have access to this function because of
  ` + "`" + `recaptchaResponse` + "`" + `. Redirect new users to create an account on <anime-skip.com>
  """
  createAccount(
    username: String!
    email: String!
    passwordHash: String!
    recaptchaResponse: String!
  ): LoginData!
  """
  Change a user's password by first confirming the old one. This is not a forgot password flow

  > Note the passwords aren't md5 hashes. The regular login will be moving to this as well eventually
  """
  changePassword(
    oldPassword: String!
    newPassword: String!
    confirmNewPassword: String!
  ): LoginData! @authenticated
  "Resend the verification email for the account of the authenticated user"
  resendVerificationEmail(recaptchaResponse: String!): Boolean @authenticated
  """
  Callback to handle the verification token included in the email sent using
  ` + "`" + `resendVerificationEmail` + "`" + `
  """
  verifyEmailAddress(validationToken: String!): Account!
  """
  The first step in the password reset process

  It sends an email containing a link to reset your password with. That link includes a token, the
  ` + "`" + `passwordResetToken` + "`" + `, that can be passed into the ` + "`" + `resetPassword` + "`" + ` mutation.

  > Because the ` + "`" + `recaptchaResponse` + "`" + ` is required, this can not be performed by 3rd parties
  """
  requestPasswordReset(recaptchaResponse: String!, email: String!): Boolean!
  """
  The second step in the password reset process, coming after ` + "`" + `requestPasswordReset` + "`" + `

  This step is pretty self explanatory, this is when the password is actually reset for a user
  """
  resetPassword(
    passwordResetToken: String!
    newPassword: String!
    confirmNewPassword: String!
  ): LoginData!
  """
  Request your account be deleted. The user will receive an email with a link to confirm deleting
  their account
  """
  deleteAccountRequest(passwordHash: String!): Account! @authenticated
  "Handle a deleteToken from ` + "`" + `deleteAccountRequest` + "`" + ` and actually delete the user's account"
  deleteAccount(deleteToken: String!): Account!

  # Preferences
  "Update user preferences"
  savePreferences(preferences: InputPreferences!): Preferences! @authenticated

  # Shows
  "Create a show and optionally become an admin"
  createShow(showInput: InputShow!, becomeAdmin: Boolean!): Show! @authenticated
  """
  Update show data
  """
  updateShow(showId: ID!, newShow: InputShow!): Show! @authenticated
  """
  Delete a show and all it's children (episodes, episode urls, timestamps, admins, etc)

  > ` + "`" + `@hasRole(role: ADMIN)` + "`" + ` - The user must have the ` + "`" + `ADMIN` + "`" + ` role to perform this action
  """
  deleteShow(showId: ID!): Show! @hasRole(role: ADMIN)

  # Show Admins
  """
  Give admin privilege to a user for a show.

  > ` + "`" + `@isShowAdmin` + "`" + ` - You need to be an admin of the show to do this action
  """
  createShowAdmin(showAdminInput: InputShowAdmin! @isShowAdmin): ShowAdmin!
  """
  Remove admin privileges from a user for a show.

  > ` + "`" + `@isShowAdmin` + "`" + ` - You need to be an admin of the show to do this action
  """
  deleteShowAdmin(showAdminId: ID! @isShowAdmin): ShowAdmin!

  # Episodes
  """
  Create an episode under a ` + "`" + `Show` + "`" + `
  """
  createEpisode(showId: ID!, episodeInput: InputEpisode!): Episode!
    @authenticated
  """
  Update episode info
  """
  updateEpisode(episodeId: ID!, newEpisode: InputEpisode!): Episode!
    @authenticated
  """
  Delete an episode and all it's child data

  > ` + "`" + `@isShowAdmin` + "`" + ` - You need to be an admin of the show to do this action
  """
  deleteEpisode(episodeId: ID! @isShowAdmin): Episode! @authenticated

  # Episode Urls
  """
  Link an ` + "`" + `Episode` + "`" + ` to a service URL
  """
  createEpisodeUrl(
    episodeId: ID!
    episodeUrlInput: InputEpisodeUrl!
  ): EpisodeUrl! @authenticated
  """
  Unlink an ` + "`" + `Episode` + "`" + ` to from service URL

  > ` + "`" + `@isShowAdmin` + "`" + ` - You need to be an admin of the show to do this action
  """
  deleteEpisodeUrl(episodeUrl: String! @isShowAdmin): EpisodeUrl! @authenticated
  """
  Update episode url info
  """
  updateEpisodeUrl(
    episodeUrl: String!
    newEpisodeUrl: InputEpisodeUrl!
  ): EpisodeUrl! @authenticated

  # Timestamps
  """
  Add a timestamp to an ` + "`" + `Episode` + "`" + `
  """
  createTimestamp(episodeId: ID!, timestampInput: InputTimestamp!): Timestamp!
    @authenticated
  """
  Update timestamp data
  """
  updateTimestamp(timestampId: ID!, newTimestamp: InputTimestamp!): Timestamp!
    @authenticated
  """
  Delete a timestamp
  """
  deleteTimestamp(timestampId: ID!): Timestamp! @authenticated
  """
  Will create, update, and delete timestamps as passed. Partial failures are completely rolled back
  """
  updateTimestamps(
    create: [InputTimestampOn!]!
    update: [InputExistingTimestamp!]!
    delete: [ID!]!
  ): UpdatedTimestamps! @authenticated

  # Timestamp Types
  """
  Create a timestamp type

  > ` + "`" + `@hasRole(role: ADMIN)` + "`" + ` - The user must have the ` + "`" + `ADMIN` + "`" + ` role to perform this action
  """
  createTimestampType(timestampTypeInput: InputTimestampType!): TimestampType!
    @hasRole(role: ADMIN)
  """
  Update a timestamp type

  > ` + "`" + `@hasRole(role: ADMIN)` + "`" + ` - The user must have the ` + "`" + `ADMIN` + "`" + ` role to perform this action
  """
  updateTimestampType(
    timestampTypeId: ID!
    newTimestampType: InputTimestampType!
  ): TimestampType! @hasRole(role: ADMIN)
  """
  Delete a timestamp type

  > ` + "`" + `@hasRole(role: ADMIN)` + "`" + ` - The user must have the ` + "`" + `ADMIN` + "`" + ` role to perform this action
  """
  deleteTimestampType(timestampTypeId: ID!): TimestampType!
    @hasRole(role: ADMIN)

  # Templates

  "Make changes to an existing template"
  createTemplate(newTemplate: InputTemplate!): Template! @authenticated
  "Make changes to an existing template"
  updateTemplate(templateId: ID!, newTemplate: InputTemplate!): Template!
    @authenticated
  """
  Delete an existing template

  > ` + "`" + `@isShowAdmin` + "`" + ` - You need to be an admin of the show to do this action
  """
  deleteTemplate(templateId: ID! @isShowAdmin): Template! @authenticated
  "Add a timestamp to an existing template"
  addTimestampToTemplate(
    templateTimestamp: InputTemplateTimestamp!
  ): TemplateTimestamp! @authenticated
  "Remove a timestamp from an existing template"
  removeTimestampFromTemplate(
    templateTimestamp: InputTemplateTimestamp!
  ): TemplateTimestamp! @authenticated

  "Create a new API client for the authenticated user to use"
  createApiClient(client: CreateApiClient!): ApiClient! @authenticated
  "Update one of the authenticated user's API clients"
  updateApiClient(id: String!, changes: ApiClientChanges!): ApiClient!
    @authenticated
  "Delete one of the authenticated user's API clients"
  deleteApiClient(id: String!): ApiClient! @authenticated
}
`, BuiltIn: false},
	{Name: "api/queries.graphqls", Input: `type Query {
  # Account
  "Get the logged in user's private account information"
  account: Account! @authenticated
  """
  Use either the username or email and an md5 hash of the user's password to get an access and
  refresh token
  """
  login(usernameEmail: String!, passwordHash: String!): LoginData!
  "Use a refresh token get a new access and refresh token"
  loginRefresh(refreshToken: String!): LoginData!

  # Users
  "Find user with a matching ` + "`" + `User.id` + "`" + `"
  findUser(userId: ID!): User!
  "Find user with a matching ` + "`" + `User.username` + "`" + `"
  findUserByUsername(username: String!): User!

  # Shows
  "Find show with a matching ` + "`" + `Show.id` + "`" + `"
  findShow(showId: ID!): Show!
  """
  Search for shows that include the ` + "`" + `search` + "`" + ` in the ` + "`" + `Show.name` + "`" + `. Results are sorted by ` + "`" + `Show.name` + "`" + `
  as ` + "`" + `ASC` + "`" + ` or ` + "`" + `DESC` + "`" + `
  """
  searchShows(
    search: String = ""
    offset: Int = 0
    limit: Int = 25
    sort: String = "ASC"
  ): [Show!]!

  # Show Admins
  "Find show admin with a matching ` + "`" + `ShowAdmin.id` + "`" + `"
  findShowAdmin(showAdminId: ID!): ShowAdmin!
  "Get a list of admins for a given ` + "`" + `Show.id` + "`" + `"
  findShowAdminsByShowId(showId: ID!): [ShowAdmin!]!
  "Get a list of show admins for a given ` + "`" + `User.id` + "`" + `"
  findShowAdminsByUserId(userId: ID!): [ShowAdmin!]!

  # Episodes
  """
  Get a list of recently added episodes that have timestamps.

  > Since this is a rather intensive query, it is cached for 20 minutes before it will look for new
  > episodes again
  """
  recentlyAddedEpisodes(limit: Int = 10, offset: Int = 0): [Episode!]!
  "Find episode with a matching ` + "`" + `Episode.id` + "`" + `"
  findEpisode(episodeId: ID!): Episode!
  "Get a list of episodes for a given ` + "`" + `Show.id` + "`" + `"
  findEpisodesByShowId(showId: ID!): [Episode!]!
  """
  Search for episodes that include the ` + "`" + `search` + "`" + ` in the ` + "`" + `Episode.name` + "`" + `. Results are sorted by
  ` + "`" + `Show.name` + "`" + `as ` + "`" + `ASC` + "`" + ` or ` + "`" + `DESC` + "`" + `

  Results can be limited to a single show by passing ` + "`" + `showId` + "`" + `
  """
  searchEpisodes(
    search: String = ""
    showId: ID
    offset: Int = 0
    limit: Int = 25
    sort: String = "ASC"
  ): [Episode!]!
  """
  Get a list of third party episodes for a given ` + "`" + `Episode.name` + "`" + `. Since this can return an array of
  multiple items, always use ` + "`" + `findEpisodeUrl` + "`" + ` first, then fallback to this query.

  Current 3rd party timestamp providers include:
  - [BetterVRV](http://tuckerchap.in/BetterVRV/)

  > See ` + "`" + `ThirdPartyEpisode` + "`" + ` for more information about how to create data based on this type
  """
  findEpisodeByName(name: String!): [ThirdPartyEpisode!]!

  # Episode Urls
  """
  Find an episode based on a URL. This is the primary method used to lookup data for a known service
  URL. See ` + "`" + `findEpisodeByName` + "`" + ` for looking up fallback data.
  """
  findEpisodeUrl(episodeUrl: String!): EpisodeUrl!
  "List all the ` + "`" + `EpisodeUrl` + "`" + `s for a given ` + "`" + `Episode.id` + "`" + `"
  findEpisodeUrlsByEpisodeId(episodeId: ID!): [EpisodeUrl!]!

  # Timestamps
  "Get timestamp info based on a ` + "`" + `Timestamp.id` + "`" + `"
  findTimestamp(timestampId: ID!): Timestamp!
  "Get all the timestamps for an episode"
  findTimestampsByEpisodeId(episodeId: ID!): [Timestamp!]!

  # Timestamp Types
  "Get timestamp type info based on a ` + "`" + `TimestampType.id` + "`" + `"
  findTimestampType(timestampTypeId: ID!): TimestampType!
  "List all the ` + "`" + `TimestampType` + "`" + `s. Items come back in a random order"
  allTimestampTypes: [TimestampType!]!

  # Templates
  "Get template info based on a ` + "`" + `Template.id` + "`" + `"
  findTemplate(templateId: ID!): Template!
  "Get a list of templates based on the ` + "`" + `Template.showId` + "`" + `"
  findTemplatesByShowId(showId: ID!): [Template!]!
  """
  Find the most relevant template based on a few search criteria. If multiple templates are found,
  their priority is like so:

  1. Matching ` + "`" + `sourceEpisodeID` + "`" + `
  2. Matching show name (case sensitive) and season (case sensitive)
  3. Matching show name (case sensitive)
  """
  findTemplateByDetails(
    episodeId: ID
    showName: String
    season: String
  ): Template!

  "List or search through the authenticated user's API clients"
  myApiClients(
    search: String
    offset: Int = 0
    limit: Int = 10
    sort: String = "ASC"
  ): [ApiClient!]! @authenticated

  "Find an API Client that you created based on it's ID. This will not return other users' clients"
  findApiClient(id: String!): ApiClient! @authenticated
}
`, BuiltIn: false},
	{Name: "api/return_types.graphqls", Input: `"""
When logging in with a password or refresh token, you can get new tokens and account info
"""
type LoginData {
  "A JWT that should be used in the header of all requests: ` + "`" + `Authorization: Bearer <authToken>` + "`" + `"
  authToken: String!
  "A JWT used for the ` + "`" + `loginRefresh` + "`" + ` query to get new ` + "`" + `LoginData` + "`" + `"
  refreshToken: String!
  "The personal account information of the user that got authenticated"
  account: Account!
}

type UpdatedTimestamps {
  created: [Timestamp!]!
  updated: [Timestamp!]!
  deleted: [Timestamp!]!
}
`, BuiltIn: false},
	{Name: "api/scalars.graphqls", Input: `"""
Standard [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp in UTC

### Example

` + "`" + `` + "`" + `` + "`" + `
2020-08-04T23:43:27Z
` + "`" + `` + "`" + `` + "`" + `
"""
scalar Time

"""
A positive integer, specifically Golang's [uint](https://pkg.go.dev/builtin#uint)
"""
scalar UInt
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addTimestampToTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.InputTemplateTimestamp
	if tmp, ok := rawArgs["templateTimestamp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateTimestamp"))
		arg0, err = ec.unmarshalNInputTemplateTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTemplateTimestamp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["templateTimestamp"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["oldPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oldPassword"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["oldPassword"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["newPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newPassword"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newPassword"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["confirmNewPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmNewPassword"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["confirmNewPassword"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["passwordHash"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordHash"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passwordHash"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["recaptchaResponse"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recaptchaResponse"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recaptchaResponse"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_createApiClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.CreateAPIClient
	if tmp, ok := rawArgs["client"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("client"))
		arg0, err = ec.unmarshalNCreateApiClient2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐCreateAPIClient(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["client"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEpisodeUrl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	var arg1 internal.InputEpisodeURL
	if tmp, ok := rawArgs["episodeUrlInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeUrlInput"))
		arg1, err = ec.unmarshalNInputEpisodeUrl2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputEpisodeURL(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeUrlInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createEpisode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	var arg1 internal.InputEpisode
	if tmp, ok := rawArgs["episodeInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeInput"))
		arg1, err = ec.unmarshalNInputEpisode2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputEpisode(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createShowAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.InputShowAdmin
	if tmp, ok := rawArgs["showAdminInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showAdminInput"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNInputShowAdmin2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputShowAdmin(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsShowAdmin == nil {
				return nil, errors.New("directive isShowAdmin is not implemented")
			}
			return ec.directives.IsShowAdmin(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(internal.InputShowAdmin); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be anime-skip.com/public-api/internal.InputShowAdmin`, tmp))
		}
	}
	args["showAdminInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createShow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.InputShow
	if tmp, ok := rawArgs["showInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showInput"))
		arg0, err = ec.unmarshalNInputShow2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputShow(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showInput"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["becomeAdmin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("becomeAdmin"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["becomeAdmin"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.InputTemplate
	if tmp, ok := rawArgs["newTemplate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newTemplate"))
		arg0, err = ec.unmarshalNInputTemplate2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newTemplate"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTimestampType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.InputTimestampType
	if tmp, ok := rawArgs["timestampTypeInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampTypeInput"))
		arg0, err = ec.unmarshalNInputTimestampType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampTypeInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTimestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	var arg1 internal.InputTimestamp
	if tmp, ok := rawArgs["timestampInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampInput"))
		arg1, err = ec.unmarshalNInputTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestamp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccountRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["passwordHash"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordHash"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passwordHash"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deleteToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleteToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deleteToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteApiClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEpisodeUrl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeUrl"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeUrl"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsShowAdmin == nil {
				return nil, errors.New("directive isShowAdmin is not implemented")
			}
			return ec.directives.IsShowAdmin(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["episodeUrl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEpisode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsShowAdmin == nil {
				return nil, errors.New("directive isShowAdmin is not implemented")
			}
			return ec.directives.IsShowAdmin(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*uuid.UUID); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/gofrs/uuid.UUID`, tmp))
		}
	}
	args["episodeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteShowAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showAdminId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showAdminId"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsShowAdmin == nil {
				return nil, errors.New("directive isShowAdmin is not implemented")
			}
			return ec.directives.IsShowAdmin(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*uuid.UUID); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/gofrs/uuid.UUID`, tmp))
		}
	}
	args["showAdminId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteShow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["templateId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
		directive0 := func(ctx context.Context) (interface{}, error) {
			return ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsShowAdmin == nil {
				return nil, errors.New("directive isShowAdmin is not implemented")
			}
			return ec.directives.IsShowAdmin(ctx, rawArgs, directive0)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*uuid.UUID); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *github.com/gofrs/uuid.UUID`, tmp))
		}
	}
	args["templateId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTimestampType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["timestampTypeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampTypeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampTypeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTimestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["timestampId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeTimestampFromTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 internal.InputTemplateTimestamp
	if tmp, ok := rawArgs["templateTimestamp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateTimestamp"))
		arg0, err = ec.unmarshalNInputTemplateTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTemplateTimestamp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["templateTimestamp"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_requestPasswordReset_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["recaptchaResponse"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recaptchaResponse"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recaptchaResponse"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_resendVerificationEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["recaptchaResponse"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recaptchaResponse"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recaptchaResponse"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["passwordResetToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordResetToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passwordResetToken"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["newPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newPassword"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newPassword"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["confirmNewPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmNewPassword"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["confirmNewPassword"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_savePreferences_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["preferences"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preferences"))
		arg0, err = ec.unmarshalNInputPreferences2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["preferences"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateApiClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNApiClientChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEpisodeUrl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeUrl"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeUrl"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeUrl"] = arg0
	var arg1 internal.InputEpisodeURL
	if tmp, ok := rawArgs["newEpisodeUrl"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newEpisodeUrl"))
		arg1, err = ec.unmarshalNInputEpisodeUrl2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputEpisodeURL(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newEpisodeUrl"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEpisode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	var arg1 internal.InputEpisode
	if tmp, ok := rawArgs["newEpisode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newEpisode"))
		arg1, err = ec.unmarshalNInputEpisode2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputEpisode(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newEpisode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateShow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	var arg1 internal.InputShow
	if tmp, ok := rawArgs["newShow"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newShow"))
		arg1, err = ec.unmarshalNInputShow2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputShow(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newShow"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["templateId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["templateId"] = arg0
	var arg1 internal.InputTemplate
	if tmp, ok := rawArgs["newTemplate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newTemplate"))
		arg1, err = ec.unmarshalNInputTemplate2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newTemplate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTimestampType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["timestampTypeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampTypeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampTypeId"] = arg0
	var arg1 internal.InputTimestampType
	if tmp, ok := rawArgs["newTimestampType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newTimestampType"))
		arg1, err = ec.unmarshalNInputTimestampType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newTimestampType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTimestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["timestampId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampId"] = arg0
	var arg1 internal.InputTimestamp
	if tmp, ok := rawArgs["newTimestamp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newTimestamp"))
		arg1, err = ec.unmarshalNInputTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestamp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newTimestamp"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTimestamps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*internal.InputTimestampOn
	if tmp, ok := rawArgs["create"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
		arg0, err = ec.unmarshalNInputTimestampOn2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampOnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["create"] = arg0
	var arg1 []*internal.InputExistingTimestamp
	if tmp, ok := rawArgs["update"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
		arg1, err = ec.unmarshalNInputExistingTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputExistingTimestampᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg1
	var arg2 []*uuid.UUID
	if tmp, ok := rawArgs["delete"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete"))
		arg2, err = ec.unmarshalNID2ᚕᚖgithubᚗcomᚋgofrsᚋuuidᚐUUIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["delete"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyEmailAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["validationToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("validationToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["validationToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findApiClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findEpisodeByName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findEpisodeUrl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeUrl"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeUrl"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeUrl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findEpisodeUrlsByEpisodeId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findEpisode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findEpisodesByShowId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findShowAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showAdminId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showAdminId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showAdminId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findShowAdminsByShowId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findShowAdminsByUserId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findShow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTemplateByDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["showName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showName"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["season"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("season"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["season"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_findTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["templateId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["templateId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTemplatesByShowId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTimestampType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["timestampTypeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampTypeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampTypeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTimestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["timestampId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timestampId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findTimestampsByEpisodeId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["episodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findUserByUsername_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *uuid.UUID
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_loginRefresh_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["refreshToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["refreshToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["usernameEmail"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usernameEmail"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usernameEmail"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["passwordHash"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passwordHash"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["passwordHash"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_myApiClients_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_recentlyAddedEpisodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_searchEpisodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *uuid.UUID
	if tmp, ok := rawArgs["showId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
		arg1, err = ec.unmarshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showId"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_searchShows_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_username(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_email(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_profileUrl(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_adminOfShows(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().AdminOfShows(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdminᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_emailVerified(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_role(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(internal.Role)
	fc.Result = res
	return ec.marshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_preferences(ctx context.Context, field graphql.CollectedField, obj *internal.Account) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Account().Preferences(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Preferences)
	fc.Result = res
	return ec.marshalNPreferences2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐPreferences(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_id(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_userId(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_user(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApiClient().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_appName(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_description(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApiClient_rateLimitRpm(ctx context.Context, field graphql.CollectedField, obj *internal.APIClient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApiClient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateLimitRpm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOUInt2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_id(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().DeletedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_season(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Season, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_number(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_absoluteNumber(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbsoluteNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_baseDuration(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_name(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_show(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().Show(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_showId(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_timestamps(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().Timestamps(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_urls(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().Urls(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.EpisodeURL)
	fc.Result = res
	return ec.marshalNEpisodeUrl2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURLᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Episode_template(ctx context.Context, field graphql.CollectedField, obj *internal.Episode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Episode().Template(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalOTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_url(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EpisodeUrl().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EpisodeUrl().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_duration(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_timestampsOffset(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampsOffset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_episodeId(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_episode(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EpisodeUrl().Episode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeUrl_source(ctx context.Context, field graphql.CollectedField, obj *internal.EpisodeURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(internal.EpisodeSource)
	fc.Result = res
	return ec.marshalNEpisodeSource2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeSource(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginData_authToken(ctx context.Context, field graphql.CollectedField, obj *internal.LoginData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginData_refreshToken(ctx context.Context, field graphql.CollectedField, obj *internal.LoginData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginData_account(ctx context.Context, field graphql.CollectedField, obj *internal.LoginData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LoginData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccount(rctx, args["username"].(string), args["email"].(string), args["passwordHash"].(string), args["recaptchaResponse"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.LoginData)
	fc.Result = res
	return ec.marshalNLoginData2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_changePassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangePassword(rctx, args["oldPassword"].(string), args["newPassword"].(string), args["confirmNewPassword"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.LoginData); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.LoginData`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.LoginData)
	fc.Result = res
	return ec.marshalNLoginData2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resendVerificationEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resendVerificationEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ResendVerificationEmail(rctx, args["recaptchaResponse"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyEmailAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyEmailAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyEmailAddress(rctx, args["validationToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestPasswordReset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestPasswordReset_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestPasswordReset(rctx, args["recaptchaResponse"].(string), args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, args["passwordResetToken"].(string), args["newPassword"].(string), args["confirmNewPassword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.LoginData)
	fc.Result = res
	return ec.marshalNLoginData2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAccountRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAccountRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAccountRequest(rctx, args["passwordHash"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Account); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Account`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccount(rctx, args["deleteToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePreferences(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePreferences_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SavePreferences(rctx, args["preferences"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Preferences); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Preferences`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Preferences)
	fc.Result = res
	return ec.marshalNPreferences2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐPreferences(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createShow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createShow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateShow(rctx, args["showInput"].(internal.InputShow), args["becomeAdmin"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Show); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Show`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateShow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateShow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateShow(rctx, args["showId"].(*uuid.UUID), args["newShow"].(internal.InputShow))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Show); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Show`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteShow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteShow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteShow(rctx, args["showId"].(*uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Show); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Show`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createShowAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createShowAdmin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateShowAdmin(rctx, args["showAdminInput"].(internal.InputShowAdmin))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteShowAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteShowAdmin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteShowAdmin(rctx, args["showAdminId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createEpisode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createEpisode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateEpisode(rctx, args["showId"].(*uuid.UUID), args["episodeInput"].(internal.InputEpisode))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Episode); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Episode`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEpisode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEpisode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateEpisode(rctx, args["episodeId"].(*uuid.UUID), args["newEpisode"].(internal.InputEpisode))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Episode); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Episode`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteEpisode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteEpisode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteEpisode(rctx, args["episodeId"].(*uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Episode); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Episode`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createEpisodeUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createEpisodeUrl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateEpisodeURL(rctx, args["episodeId"].(*uuid.UUID), args["episodeUrlInput"].(internal.InputEpisodeURL))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.EpisodeURL); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.EpisodeURL`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.EpisodeURL)
	fc.Result = res
	return ec.marshalNEpisodeUrl2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteEpisodeUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteEpisodeUrl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteEpisodeURL(rctx, args["episodeUrl"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.EpisodeURL); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.EpisodeURL`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.EpisodeURL)
	fc.Result = res
	return ec.marshalNEpisodeUrl2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEpisodeUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEpisodeUrl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateEpisodeURL(rctx, args["episodeUrl"].(string), args["newEpisodeUrl"].(internal.InputEpisodeURL))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.EpisodeURL); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.EpisodeURL`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.EpisodeURL)
	fc.Result = res
	return ec.marshalNEpisodeUrl2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTimestamp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTimestamp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTimestamp(rctx, args["episodeId"].(*uuid.UUID), args["timestampInput"].(internal.InputTimestamp))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Timestamp); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Timestamp`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTimestamp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTimestamp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTimestamp(rctx, args["timestampId"].(*uuid.UUID), args["newTimestamp"].(internal.InputTimestamp))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Timestamp); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Timestamp`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTimestamp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTimestamp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTimestamp(rctx, args["timestampId"].(*uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Timestamp); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Timestamp`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTimestamps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTimestamps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTimestamps(rctx, args["create"].([]*internal.InputTimestampOn), args["update"].([]*internal.InputExistingTimestamp), args["delete"].([]*uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.UpdatedTimestamps); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.UpdatedTimestamps`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.UpdatedTimestamps)
	fc.Result = res
	return ec.marshalNUpdatedTimestamps2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUpdatedTimestamps(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTimestampType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTimestampType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTimestampType(rctx, args["timestampTypeInput"].(internal.InputTimestampType))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.TimestampType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.TimestampType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTimestampType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTimestampType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTimestampType(rctx, args["timestampTypeId"].(*uuid.UUID), args["newTimestampType"].(internal.InputTimestampType))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.TimestampType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.TimestampType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTimestampType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTimestampType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTimestampType(rctx, args["timestampTypeId"].(*uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx, "ADMIN")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.TimestampType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.TimestampType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTemplate(rctx, args["newTemplate"].(internal.InputTemplate))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Template); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Template`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTemplate(rctx, args["templateId"].(*uuid.UUID), args["newTemplate"].(internal.InputTemplate))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Template); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Template`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTemplate(rctx, args["templateId"].(*uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Template); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Template`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addTimestampToTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addTimestampToTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddTimestampToTemplate(rctx, args["templateTimestamp"].(internal.InputTemplateTimestamp))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.TemplateTimestamp); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.TemplateTimestamp`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TemplateTimestamp)
	fc.Result = res
	return ec.marshalNTemplateTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeTimestampFromTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeTimestampFromTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveTimestampFromTemplate(rctx, args["templateTimestamp"].(internal.InputTemplateTimestamp))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.TemplateTimestamp); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.TemplateTimestamp`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TemplateTimestamp)
	fc.Result = res
	return ec.marshalNTemplateTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createApiClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createApiClient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAPIClient(rctx, args["client"].(internal.CreateAPIClient))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.APIClient); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.APIClient`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.APIClient)
	fc.Result = res
	return ec.marshalNApiClient2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateApiClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateApiClient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAPIClient(rctx, args["id"].(string), args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.APIClient); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.APIClient`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.APIClient)
	fc.Result = res
	return ec.marshalNApiClient2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteApiClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteApiClient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAPIClient(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.APIClient); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.APIClient`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.APIClient)
	fc.Result = res
	return ec.marshalNApiClient2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_id(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_userId(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_user(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Preferences().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_enableAutoSkip(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableAutoSkip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_enableAutoPlay(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableAutoPlay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_minimizeToolbarWhenEditing(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinimizeToolbarWhenEditing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_hideTimelineWhenMinimized(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideTimelineWhenMinimized, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_colorTheme(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorTheme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(internal.ColorTheme)
	fc.Result = res
	return ec.marshalNColorTheme2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐColorTheme(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipBranding(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipBranding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipIntros(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipIntros, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipNewIntros(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipNewIntros, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipMixedIntros(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipMixedIntros, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipRecaps(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipRecaps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipFiller(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipFiller, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipCanon(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipCanon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipTransitions(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipTransitions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipCredits(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipCredits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipNewCredits(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipNewCredits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipMixedCredits(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipMixedCredits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipPreview(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipPreview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Preferences_skipTitleCard(ctx context.Context, field graphql.CollectedField, obj *internal.Preferences) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Preferences",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipTitleCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_account(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Account(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.Account); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.Account`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Login(rctx, args["usernameEmail"].(string), args["passwordHash"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.LoginData)
	fc.Result = res
	return ec.marshalNLoginData2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_loginRefresh(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_loginRefresh_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LoginRefresh(rctx, args["refreshToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.LoginData)
	fc.Result = res
	return ec.marshalNLoginData2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindUser(rctx, args["userId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findUserByUsername(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findUserByUsername_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindUserByUsername(rctx, args["username"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findShow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findShow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindShow(rctx, args["showId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchShows(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchShows_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchShows(rctx, args["search"].(*string), args["offset"].(*int), args["limit"].(*int), args["sort"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findShowAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findShowAdmin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindShowAdmin(rctx, args["showAdminId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findShowAdminsByShowId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findShowAdminsByShowId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindShowAdminsByShowID(rctx, args["showId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdminᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findShowAdminsByUserId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findShowAdminsByUserId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindShowAdminsByUserID(rctx, args["userId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdminᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recentlyAddedEpisodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recentlyAddedEpisodes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecentlyAddedEpisodes(rctx, args["limit"].(*int), args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findEpisode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findEpisode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindEpisode(rctx, args["episodeId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findEpisodesByShowId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findEpisodesByShowId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindEpisodesByShowID(rctx, args["showId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchEpisodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchEpisodes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchEpisodes(rctx, args["search"].(*string), args["showId"].(*uuid.UUID), args["offset"].(*int), args["limit"].(*int), args["sort"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findEpisodeByName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findEpisodeByName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindEpisodeByName(rctx, args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ThirdPartyEpisode)
	fc.Result = res
	return ec.marshalNThirdPartyEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyEpisodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findEpisodeUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findEpisodeUrl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindEpisodeURL(rctx, args["episodeUrl"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.EpisodeURL)
	fc.Result = res
	return ec.marshalNEpisodeUrl2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findEpisodeUrlsByEpisodeId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findEpisodeUrlsByEpisodeId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindEpisodeUrlsByEpisodeID(rctx, args["episodeId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.EpisodeURL)
	fc.Result = res
	return ec.marshalNEpisodeUrl2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURLᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTimestamp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTimestamp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTimestamp(rctx, args["timestampId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTimestampsByEpisodeId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTimestampsByEpisodeId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTimestampsByEpisodeID(rctx, args["episodeId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTimestampType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTimestampType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTimestampType(rctx, args["timestampTypeId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allTimestampTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllTimestampTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTemplate(rctx, args["templateId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTemplatesByShowId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTemplatesByShowId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTemplatesByShowID(rctx, args["showId"].(*uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findTemplateByDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findTemplateByDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindTemplateByDetails(rctx, args["episodeId"].(*uuid.UUID), args["showName"].(*string), args["season"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_myApiClients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_myApiClients_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MyAPIClients(rctx, args["search"].(*string), args["offset"].(*int), args["limit"].(*int), args["sort"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*internal.APIClient); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*anime-skip.com/public-api/internal.APIClient`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.APIClient)
	fc.Result = res
	return ec.marshalNApiClient2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findApiClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findApiClient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().FindAPIClient(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.Authenticated == nil {
				return nil, errors.New("directive authenticated is not implemented")
			}
			return ec.directives.Authenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*internal.APIClient); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *anime-skip.com/public-api/internal.APIClient`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.APIClient)
	fc.Result = res
	return ec.marshalNApiClient2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_id(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().DeletedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_name(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_originalName(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_website(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_image(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_admins(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().Admins(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdminᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_episodes(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().Episodes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_templates(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().Templates(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_seasonCount(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().SeasonCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Show_episodeCount(ctx context.Context, field graphql.CollectedField, obj *internal.Show) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Show",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Show().EpisodeCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_id(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ShowAdmin().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ShowAdmin().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ShowAdmin().DeletedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_showId(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_show(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ShowAdmin().Show(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_userId(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ShowAdmin_user(ctx context.Context, field graphql.CollectedField, obj *internal.ShowAdmin) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ShowAdmin",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ShowAdmin().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_id(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().DeletedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_showId(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_show(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().Show(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Show)
	fc.Result = res
	return ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_type(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(internal.TemplateType)
	fc.Result = res
	return ec.marshalNTemplateType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateType(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_seasons(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seasons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_sourceEpisodeId(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceEpisodeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_sourceEpisode(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().SourceEpisode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_timestamps(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().Timestamps(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Template_timestampIds(ctx context.Context, field graphql.CollectedField, obj *internal.Template) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Template",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Template().TimestampIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚕᚖgithubᚗcomᚋgofrsᚋuuidᚐUUIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateTimestamp_templateId(ctx context.Context, field graphql.CollectedField, obj *internal.TemplateTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TemplateID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateTimestamp_template(ctx context.Context, field graphql.CollectedField, obj *internal.TemplateTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TemplateTimestamp().Template(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Template)
	fc.Result = res
	return ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateTimestamp_timestampId(ctx context.Context, field graphql.CollectedField, obj *internal.TemplateTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TemplateTimestamp_timestamp(ctx context.Context, field graphql.CollectedField, obj *internal.TemplateTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TemplateTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TemplateTimestamp().Timestamp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_id(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_season(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Season, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_number(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_absoluteNumber(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbsoluteNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_baseDuration(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_name(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_source(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampSource)
	fc.Result = res
	return ec.marshalOTimestampSource2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_timestamps(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ThirdPartyTimestamp)
	fc.Result = res
	return ec.marshalNThirdPartyTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_showId(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyEpisode_show(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyEpisode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyEpisode",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Show, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.ThirdPartyShow)
	fc.Result = res
	return ec.marshalNThirdPartyShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyShow(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyShow_name(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyShow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyShow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyShow_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyShow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyShow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyShow_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyShow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyShow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyTimestamp_id(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyTimestamp_at(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.At, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyTimestamp_typeId(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyTimestamp_type(ctx context.Context, field graphql.CollectedField, obj *internal.ThirdPartyTimestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyTimestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ThirdPartyTimestamp().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_id(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Timestamp().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Timestamp().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Timestamp().DeletedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_at(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.At, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_source(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(internal.TimestampSource)
	fc.Result = res
	return ec.marshalNTimestampSource2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_typeId(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_type(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Timestamp().Type(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.TimestampType)
	fc.Result = res
	return ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_episodeId(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Timestamp_episode(ctx context.Context, field graphql.CollectedField, obj *internal.Timestamp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Timestamp",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Timestamp().Episode(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.Episode)
	fc.Result = res
	return ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_id(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_createdByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_createdBy(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimestampType().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_updatedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_updatedBy(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimestampType().UpdatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_deletedByUserId(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_deletedBy(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TimestampType().DeletedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*internal.User)
	fc.Result = res
	return ec.marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_name(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _TimestampType_description(ctx context.Context, field graphql.CollectedField, obj *internal.TimestampType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TimestampType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdatedTimestamps_created(ctx context.Context, field graphql.CollectedField, obj *internal.UpdatedTimestamps) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdatedTimestamps",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdatedTimestamps_updated(ctx context.Context, field graphql.CollectedField, obj *internal.UpdatedTimestamps) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdatedTimestamps",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdatedTimestamps_deleted(ctx context.Context, field graphql.CollectedField, obj *internal.UpdatedTimestamps) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdatedTimestamps",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.Timestamp)
	fc.Result = res
	return ec.marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *internal.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *internal.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_deletedAt(ctx context.Context, field graphql.CollectedField, obj *internal.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *internal.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_profileUrl(ctx context.Context, field graphql.CollectedField, obj *internal.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_adminOfShows(ctx context.Context, field graphql.CollectedField, obj *internal.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().AdminOfShows(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*internal.ShowAdmin)
	fc.Result = res
	return ec.marshalNShowAdmin2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdminᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateApiClient(ctx context.Context, obj interface{}) (internal.CreateAPIClient, error) {
	var it internal.CreateAPIClient
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEpisode(ctx context.Context, obj interface{}) (internal.InputEpisode, error) {
	var it internal.InputEpisode
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "season":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("season"))
			it.Season, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("number"))
			it.Number, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "absoluteNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("absoluteNumber"))
			it.AbsoluteNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "baseDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseDuration"))
			it.BaseDuration, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputEpisodeUrl(ctx context.Context, obj interface{}) (internal.InputEpisodeURL, error) {
	var it internal.InputEpisodeURL
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampsOffset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampsOffset"))
			it.TimestampsOffset, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputExistingTimestamp(ctx context.Context, obj interface{}) (internal.InputExistingTimestamp, error) {
	var it internal.InputExistingTimestamp
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalNInputTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestamp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputShow(ctx context.Context, obj interface{}) (internal.InputShow, error) {
	var it internal.InputShow
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "originalName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("originalName"))
			it.OriginalName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputShowAdmin(ctx context.Context, obj interface{}) (internal.InputShowAdmin, error) {
	var it internal.InputShowAdmin
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "showId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
			it.ShowID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTemplate(ctx context.Context, obj interface{}) (internal.InputTemplate, error) {
	var it internal.InputTemplate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "showId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showId"))
			it.ShowID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNTemplateType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateType(ctx, v)
			if err != nil {
				return it, err
			}
		case "seasons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seasons"))
			it.Seasons, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceEpisodeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceEpisodeId"))
			it.SourceEpisodeID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTemplateTimestamp(ctx context.Context, obj interface{}) (internal.InputTemplateTimestamp, error) {
	var it internal.InputTemplateTimestamp
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "templateId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
			it.TemplateID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampId"))
			it.TimestampID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTimestamp(ctx context.Context, obj interface{}) (internal.InputTimestamp, error) {
	var it internal.InputTimestamp
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("at"))
			it.At, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "typeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeId"))
			it.TypeID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOTimestampSource2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTimestampOn(ctx context.Context, obj interface{}) (internal.InputTimestampOn, error) {
	var it internal.InputTimestampOn
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "episodeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeId"))
			it.EpisodeID, err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalNInputTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestamp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInputTimestampType(ctx context.Context, obj interface{}) (internal.InputTimestampType, error) {
	var it internal.InputTimestampType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _BaseModel(ctx context.Context, sel ast.SelectionSet, obj internal.BaseModel) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case internal.Episode:
		return ec._Episode(ctx, sel, &obj)
	case *internal.Episode:
		if obj == nil {
			return graphql.Null
		}
		return ec._Episode(ctx, sel, obj)
	case internal.Show:
		return ec._Show(ctx, sel, &obj)
	case *internal.Show:
		if obj == nil {
			return graphql.Null
		}
		return ec._Show(ctx, sel, obj)
	case internal.ShowAdmin:
		return ec._ShowAdmin(ctx, sel, &obj)
	case *internal.ShowAdmin:
		if obj == nil {
			return graphql.Null
		}
		return ec._ShowAdmin(ctx, sel, obj)
	case internal.Timestamp:
		return ec._Timestamp(ctx, sel, &obj)
	case *internal.Timestamp:
		if obj == nil {
			return graphql.Null
		}
		return ec._Timestamp(ctx, sel, obj)
	case internal.TimestampType:
		return ec._TimestampType(ctx, sel, &obj)
	case *internal.TimestampType:
		if obj == nil {
			return graphql.Null
		}
		return ec._TimestampType(ctx, sel, obj)
	case internal.Template:
		return ec._Template(ctx, sel, &obj)
	case *internal.Template:
		if obj == nil {
			return graphql.Null
		}
		return ec._Template(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *internal.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "username":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_username(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_email(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "profileUrl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_profileUrl(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "adminOfShows":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_adminOfShows(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "emailVerified":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_emailVerified(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "role":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Account_role(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "preferences":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Account_preferences(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apiClientImplementors = []string{"ApiClient"}

func (ec *executionContext) _ApiClient(ctx context.Context, sel ast.SelectionSet, obj *internal.APIClient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiClientImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiClient")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_createdBy(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_updatedBy(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_deletedBy(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "userId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_userId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApiClient_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "appName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_appName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "rateLimitRpm":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ApiClient_rateLimitRpm(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var episodeImplementors = []string{"Episode", "BaseModel"}

func (ec *executionContext) _Episode(ctx context.Context, sel ast.SelectionSet, obj *internal.Episode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, episodeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Episode")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_deletedBy(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "season":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_season(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "number":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_number(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "absoluteNumber":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_absoluteNumber(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "baseDuration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_baseDuration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "show":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_show(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "showId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Episode_showId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "timestamps":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_timestamps(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "urls":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_urls(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "template":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Episode_template(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var episodeUrlImplementors = []string{"EpisodeUrl"}

func (ec *executionContext) _EpisodeUrl(ctx context.Context, sel ast.SelectionSet, obj *internal.EpisodeURL) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, episodeUrlImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EpisodeUrl")
		case "url":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_url(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EpisodeUrl_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EpisodeUrl_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "duration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_duration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "timestampsOffset":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_timestampsOffset(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "episodeId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_episodeId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "episode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EpisodeUrl_episode(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._EpisodeUrl_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginDataImplementors = []string{"LoginData"}

func (ec *executionContext) _LoginData(ctx context.Context, sel ast.SelectionSet, obj *internal.LoginData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginData")
		case "authToken":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LoginData_authToken(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LoginData_refreshToken(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "account":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._LoginData_account(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAccount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAccount(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changePassword":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changePassword(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resendVerificationEmail":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resendVerificationEmail(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "verifyEmailAddress":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_verifyEmailAddress(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestPasswordReset":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_requestPasswordReset(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPassword":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resetPassword(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAccountRequest":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAccountRequest(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAccount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAccount(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePreferences":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_savePreferences(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createShow":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createShow(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateShow":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateShow(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteShow":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteShow(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createShowAdmin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createShowAdmin(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteShowAdmin":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteShowAdmin(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createEpisode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEpisode(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEpisode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEpisode(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteEpisode":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEpisode(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createEpisodeUrl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEpisodeUrl(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteEpisodeUrl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEpisodeUrl(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEpisodeUrl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEpisodeUrl(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTimestamp":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTimestamp(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTimestamp":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTimestamp(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTimestamp":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTimestamp(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTimestamps":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTimestamps(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTimestampType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTimestampType(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTimestampType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTimestampType(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTimestampType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTimestampType(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTemplate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTemplate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTemplate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTemplate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTemplate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTemplate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addTimestampToTemplate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addTimestampToTemplate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeTimestampFromTemplate":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeTimestampFromTemplate(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createApiClient":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createApiClient(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateApiClient":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateApiClient(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteApiClient":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteApiClient(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var preferencesImplementors = []string{"Preferences"}

func (ec *executionContext) _Preferences(ctx context.Context, sel ast.SelectionSet, obj *internal.Preferences) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, preferencesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Preferences")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "userId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_userId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Preferences_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "enableAutoSkip":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_enableAutoSkip(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "enableAutoPlay":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_enableAutoPlay(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "minimizeToolbarWhenEditing":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_minimizeToolbarWhenEditing(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hideTimelineWhenMinimized":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_hideTimelineWhenMinimized(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "colorTheme":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_colorTheme(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipBranding":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipBranding(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipIntros":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipIntros(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipNewIntros":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipNewIntros(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipMixedIntros":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipMixedIntros(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipRecaps":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipRecaps(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipFiller":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipFiller(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipCanon":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipCanon(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipTransitions":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipTransitions(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipCredits":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipCredits(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipNewCredits":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipNewCredits(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipMixedCredits":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipMixedCredits(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipPreview":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipPreview(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "skipTitleCard":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Preferences_skipTitleCard(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "account":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_account(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "login":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_login(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loginRefresh":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loginRefresh(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findUserByUsername":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findUserByUsername(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findShow":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findShow(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchShows":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchShows(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findShowAdmin":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findShowAdmin(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findShowAdminsByShowId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findShowAdminsByShowId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findShowAdminsByUserId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findShowAdminsByUserId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "recentlyAddedEpisodes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recentlyAddedEpisodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findEpisode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findEpisode(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findEpisodesByShowId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findEpisodesByShowId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchEpisodes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchEpisodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findEpisodeByName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findEpisodeByName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findEpisodeUrl":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findEpisodeUrl(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findEpisodeUrlsByEpisodeId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findEpisodeUrlsByEpisodeId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTimestamp":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTimestamp(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTimestampsByEpisodeId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTimestampsByEpisodeId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTimestampType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTimestampType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allTimestampTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allTimestampTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTemplate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTemplatesByShowId":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTemplatesByShowId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findTemplateByDetails":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findTemplateByDetails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "myApiClients":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myApiClients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "findApiClient":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findApiClient(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		case "__schema":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			}

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, innerFunc)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var showImplementors = []string{"Show", "BaseModel"}

func (ec *executionContext) _Show(ctx context.Context, sel ast.SelectionSet, obj *internal.Show) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, showImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Show")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_deletedBy(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "originalName":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_originalName(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "website":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_website(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "image":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Show_image(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "admins":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_admins(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "episodes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_episodes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "templates":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_templates(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "seasonCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_seasonCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "episodeCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Show_episodeCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var showAdminImplementors = []string{"ShowAdmin", "BaseModel"}

func (ec *executionContext) _ShowAdmin(ctx context.Context, sel ast.SelectionSet, obj *internal.ShowAdmin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, showAdminImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShowAdmin")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ShowAdmin_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ShowAdmin_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ShowAdmin_deletedBy(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "showId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_showId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "show":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ShowAdmin_show(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "userId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ShowAdmin_userId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ShowAdmin_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var templateImplementors = []string{"Template", "BaseModel"}

func (ec *executionContext) _Template(ctx context.Context, sel ast.SelectionSet, obj *internal.Template) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Template")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_deletedBy(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "showId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_showId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "show":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_show(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "seasons":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_seasons(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "sourceEpisodeId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Template_sourceEpisodeId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sourceEpisode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_sourceEpisode(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "timestamps":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_timestamps(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "timestampIds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Template_timestampIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var templateTimestampImplementors = []string{"TemplateTimestamp"}

func (ec *executionContext) _TemplateTimestamp(ctx context.Context, sel ast.SelectionSet, obj *internal.TemplateTimestamp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, templateTimestampImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemplateTimestamp")
		case "templateId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TemplateTimestamp_templateId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "template":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TemplateTimestamp_template(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "timestampId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TemplateTimestamp_timestampId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "timestamp":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TemplateTimestamp_timestamp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var thirdPartyEpisodeImplementors = []string{"ThirdPartyEpisode"}

func (ec *executionContext) _ThirdPartyEpisode(ctx context.Context, sel ast.SelectionSet, obj *internal.ThirdPartyEpisode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thirdPartyEpisodeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThirdPartyEpisode")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "season":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_season(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "number":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_number(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "absoluteNumber":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_absoluteNumber(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "baseDuration":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_baseDuration(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "timestamps":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_timestamps(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_showId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "show":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyEpisode_show(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var thirdPartyShowImplementors = []string{"ThirdPartyShow"}

func (ec *executionContext) _ThirdPartyShow(ctx context.Context, sel ast.SelectionSet, obj *internal.ThirdPartyShow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thirdPartyShowImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThirdPartyShow")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyShow_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyShow_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyShow_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var thirdPartyTimestampImplementors = []string{"ThirdPartyTimestamp"}

func (ec *executionContext) _ThirdPartyTimestamp(ctx context.Context, sel ast.SelectionSet, obj *internal.ThirdPartyTimestamp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thirdPartyTimestampImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThirdPartyTimestamp")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyTimestamp_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyTimestamp_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "typeId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._ThirdPartyTimestamp_typeId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ThirdPartyTimestamp_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timestampImplementors = []string{"Timestamp", "BaseModel"}

func (ec *executionContext) _Timestamp(ctx context.Context, sel ast.SelectionSet, obj *internal.Timestamp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timestampImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Timestamp")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Timestamp_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Timestamp_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Timestamp_deletedBy(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "at":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_at(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "source":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_source(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "typeId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_typeId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Timestamp_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "episodeId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Timestamp_episodeId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "episode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Timestamp_episode(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timestampTypeImplementors = []string{"TimestampType", "BaseModel"}

func (ec *executionContext) _TimestampType(ctx context.Context, sel ast.SelectionSet, obj *internal.TimestampType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timestampTypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimestampType")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_createdByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimestampType_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "updatedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_updatedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_updatedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updatedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimestampType_updatedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedByUserId":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_deletedByUserId(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "deletedBy":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TimestampType_deletedBy(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._TimestampType_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updatedTimestampsImplementors = []string{"UpdatedTimestamps"}

func (ec *executionContext) _UpdatedTimestamps(ctx context.Context, sel ast.SelectionSet, obj *internal.UpdatedTimestamps) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatedTimestampsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatedTimestamps")
		case "created":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UpdatedTimestamps_created(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UpdatedTimestamps_updated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._UpdatedTimestamps_deleted(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *internal.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_createdAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_deletedAt(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "username":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_username(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "profileUrl":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._User_profileUrl(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "adminOfShows":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_adminOfShows(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "locations":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_locations(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Directive_isRepeatable(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___EnumValue_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "args":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_args(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_isDeprecated(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Field_deprecationReason(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "type":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_type(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___InputValue_defaultValue(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_types(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_queryType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_mutationType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "subscriptionType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_subscriptionType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "directives":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Schema_directives(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_kind(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_name(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "description":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_description(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "fields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_fields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "interfaces":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_interfaces(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "possibleTypes":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_possibleTypes(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "enumValues":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_enumValues(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "inputFields":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_inputFields(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "ofType":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec.___Type_ofType(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx context.Context, sel ast.SelectionSet, v internal.Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccount2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAccount(ctx context.Context, sel ast.SelectionSet, v *internal.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalNApiClient2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx context.Context, sel ast.SelectionSet, v internal.APIClient) graphql.Marshaler {
	return ec._ApiClient(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiClient2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClientᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.APIClient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNApiClient2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNApiClient2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐAPIClient(ctx context.Context, sel ast.SelectionSet, v *internal.APIClient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApiClient(ctx, sel, v)
}

func (ec *executionContext) unmarshalNApiClientChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNColorTheme2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐColorTheme(ctx context.Context, v interface{}) (internal.ColorTheme, error) {
	var res internal.ColorTheme
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNColorTheme2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐColorTheme(ctx context.Context, sel ast.SelectionSet, v internal.ColorTheme) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCreateApiClient2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐCreateAPIClient(ctx context.Context, v interface{}) (internal.CreateAPIClient, error) {
	res, err := ec.unmarshalInputCreateApiClient(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEpisode2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx context.Context, sel ast.SelectionSet, v internal.Episode) graphql.Marshaler {
	return ec._Episode(ctx, sel, &v)
}

func (ec *executionContext) marshalNEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.Episode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisode(ctx context.Context, sel ast.SelectionSet, v *internal.Episode) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Episode(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEpisodeSource2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeSource(ctx context.Context, v interface{}) (internal.EpisodeSource, error) {
	var res internal.EpisodeSource
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEpisodeSource2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeSource(ctx context.Context, sel ast.SelectionSet, v internal.EpisodeSource) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEpisodeUrl2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx context.Context, sel ast.SelectionSet, v internal.EpisodeURL) graphql.Marshaler {
	return ec._EpisodeUrl(ctx, sel, &v)
}

func (ec *executionContext) marshalNEpisodeUrl2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURLᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.EpisodeURL) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEpisodeUrl2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEpisodeUrl2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐEpisodeURL(ctx context.Context, sel ast.SelectionSet, v *internal.EpisodeURL) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EpisodeUrl(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2ᚕᚖgithubᚗcomᚋgofrsᚋuuidᚐUUIDᚄ(ctx context.Context, v interface{}) ([]*uuid.UUID, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕᚖgithubᚗcomᚋgofrsᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []*uuid.UUID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	res, err := scalars.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalars.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInputEpisode2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputEpisode(ctx context.Context, v interface{}) (internal.InputEpisode, error) {
	res, err := ec.unmarshalInputInputEpisode(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputEpisodeUrl2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputEpisodeURL(ctx context.Context, v interface{}) (internal.InputEpisodeURL, error) {
	res, err := ec.unmarshalInputInputEpisodeUrl(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputExistingTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputExistingTimestampᚄ(ctx context.Context, v interface{}) ([]*internal.InputExistingTimestamp, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*internal.InputExistingTimestamp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputExistingTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputExistingTimestamp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNInputExistingTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputExistingTimestamp(ctx context.Context, v interface{}) (*internal.InputExistingTimestamp, error) {
	res, err := ec.unmarshalInputInputExistingTimestamp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputPreferences2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNInputShow2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputShow(ctx context.Context, v interface{}) (internal.InputShow, error) {
	res, err := ec.unmarshalInputInputShow(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputShowAdmin2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputShowAdmin(ctx context.Context, v interface{}) (internal.InputShowAdmin, error) {
	res, err := ec.unmarshalInputInputShowAdmin(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputTemplate2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTemplate(ctx context.Context, v interface{}) (internal.InputTemplate, error) {
	res, err := ec.unmarshalInputInputTemplate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputTemplateTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTemplateTimestamp(ctx context.Context, v interface{}) (internal.InputTemplateTimestamp, error) {
	res, err := ec.unmarshalInputInputTemplateTimestamp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestamp(ctx context.Context, v interface{}) (internal.InputTimestamp, error) {
	res, err := ec.unmarshalInputInputTimestamp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestamp(ctx context.Context, v interface{}) (*internal.InputTimestamp, error) {
	res, err := ec.unmarshalInputInputTimestamp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputTimestampOn2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampOnᚄ(ctx context.Context, v interface{}) ([]*internal.InputTimestampOn, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*internal.InputTimestampOn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInputTimestampOn2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampOn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNInputTimestampOn2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampOn(ctx context.Context, v interface{}) (*internal.InputTimestampOn, error) {
	res, err := ec.unmarshalInputInputTimestampOn(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInputTimestampType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐInputTimestampType(ctx context.Context, v interface{}) (internal.InputTimestampType, error) {
	res, err := ec.unmarshalInputInputTimestampType(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLoginData2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx context.Context, sel ast.SelectionSet, v internal.LoginData) graphql.Marshaler {
	return ec._LoginData(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginData2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐLoginData(ctx context.Context, sel ast.SelectionSet, v *internal.LoginData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LoginData(ctx, sel, v)
}

func (ec *executionContext) marshalNPreferences2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐPreferences(ctx context.Context, sel ast.SelectionSet, v internal.Preferences) graphql.Marshaler {
	return ec._Preferences(ctx, sel, &v)
}

func (ec *executionContext) marshalNPreferences2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐPreferences(ctx context.Context, sel ast.SelectionSet, v *internal.Preferences) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Preferences(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx context.Context, v interface{}) (internal.Role, error) {
	var res internal.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐRole(ctx context.Context, sel ast.SelectionSet, v internal.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNShow2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx context.Context, sel ast.SelectionSet, v internal.Show) graphql.Marshaler {
	return ec._Show(ctx, sel, &v)
}

func (ec *executionContext) marshalNShow2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.Show) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShow(ctx context.Context, sel ast.SelectionSet, v *internal.Show) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Show(ctx, sel, v)
}

func (ec *executionContext) marshalNShowAdmin2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdmin(ctx context.Context, sel ast.SelectionSet, v internal.ShowAdmin) graphql.Marshaler {
	return ec._ShowAdmin(ctx, sel, &v)
}

func (ec *executionContext) marshalNShowAdmin2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdminᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.ShowAdmin) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShowAdmin2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdmin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShowAdmin2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐShowAdmin(ctx context.Context, sel ast.SelectionSet, v *internal.ShowAdmin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ShowAdmin(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTemplate2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx context.Context, sel ast.SelectionSet, v internal.Template) graphql.Marshaler {
	return ec._Template(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplate2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.Template) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx context.Context, sel ast.SelectionSet, v *internal.Template) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Template(ctx, sel, v)
}

func (ec *executionContext) marshalNTemplateTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateTimestamp(ctx context.Context, sel ast.SelectionSet, v internal.TemplateTimestamp) graphql.Marshaler {
	return ec._TemplateTimestamp(ctx, sel, &v)
}

func (ec *executionContext) marshalNTemplateTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateTimestamp(ctx context.Context, sel ast.SelectionSet, v *internal.TemplateTimestamp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TemplateTimestamp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTemplateType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateType(ctx context.Context, v interface{}) (internal.TemplateType, error) {
	var res internal.TemplateType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTemplateType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplateType(ctx context.Context, sel ast.SelectionSet, v internal.TemplateType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNThirdPartyEpisode2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyEpisodeᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.ThirdPartyEpisode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNThirdPartyEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyEpisode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNThirdPartyEpisode2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyEpisode(ctx context.Context, sel ast.SelectionSet, v *internal.ThirdPartyEpisode) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ThirdPartyEpisode(ctx, sel, v)
}

func (ec *executionContext) marshalNThirdPartyShow2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyShow(ctx context.Context, sel ast.SelectionSet, v *internal.ThirdPartyShow) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ThirdPartyShow(ctx, sel, v)
}

func (ec *executionContext) marshalNThirdPartyTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyTimestampᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.ThirdPartyTimestamp) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNThirdPartyTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyTimestamp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNThirdPartyTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐThirdPartyTimestamp(ctx context.Context, sel ast.SelectionSet, v *internal.ThirdPartyTimestamp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ThirdPartyTimestamp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimestamp2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx context.Context, sel ast.SelectionSet, v internal.Timestamp) graphql.Marshaler {
	return ec._Timestamp(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimestamp2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.Timestamp) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTimestamp2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestamp(ctx context.Context, sel ast.SelectionSet, v *internal.Timestamp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Timestamp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTimestampSource2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx context.Context, v interface{}) (internal.TimestampSource, error) {
	var res internal.TimestampSource
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestampSource2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx context.Context, sel ast.SelectionSet, v internal.TimestampSource) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTimestampType2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx context.Context, sel ast.SelectionSet, v internal.TimestampType) graphql.Marshaler {
	return ec._TimestampType(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimestampType2ᚕᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*internal.TimestampType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTimestampType2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampType(ctx context.Context, sel ast.SelectionSet, v *internal.TimestampType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TimestampType(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdatedTimestamps2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUpdatedTimestamps(ctx context.Context, sel ast.SelectionSet, v internal.UpdatedTimestamps) graphql.Marshaler {
	return ec._UpdatedTimestamps(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdatedTimestamps2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUpdatedTimestamps(ctx context.Context, sel ast.SelectionSet, v *internal.UpdatedTimestamps) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UpdatedTimestamps(ctx, sel, v)
}

func (ec *executionContext) marshalNUser2animeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx context.Context, sel ast.SelectionSet, v internal.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx context.Context, sel ast.SelectionSet, v *internal.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOColorTheme2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐColorTheme(ctx context.Context, v interface{}) (*internal.ColorTheme, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(internal.ColorTheme)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOColorTheme2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐColorTheme(ctx context.Context, sel ast.SelectionSet, v *internal.ColorTheme) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalars.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := scalars.MarshalUUID(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTemplate2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTemplate(ctx context.Context, sel ast.SelectionSet, v *internal.Template) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Template(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOTimestampSource2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx context.Context, v interface{}) (*internal.TimestampSource, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(internal.TimestampSource)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestampSource2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐTimestampSource(ctx context.Context, sel ast.SelectionSet, v *internal.TimestampSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUInt2ᚖuint(ctx context.Context, v interface{}) (*uint, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalars.UnmarshalUInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUInt2ᚖuint(ctx context.Context, sel ast.SelectionSet, v *uint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := scalars.MarshalUInt(v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖanimeᚑskipᚗcomᚋpublicᚑapiᚋinternalᚐUser(ctx context.Context, sel ast.SelectionSet, v *internal.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
