// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/public-api/internal"
	context1 "anime-skip.com/public-api/internal/context"
	errors1 "anime-skip.com/public-api/internal/errors"
	"context"
	"database/sql"
	"errors"
	"fmt"
	uuid "github.com/gofrs/uuid"
	"time"
)

func getShowByIDInTx(ctx context.Context, tx internal.Tx, id uuid.UUID) (internal.Show, error) {
	var show internal.Show
	err := tx.GetContext(ctx, &show, "SELECT * FROM shows WHERE id=$1", id)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.Show{}, errors1.NewRecordNotFound(fmt.Sprintf("Show.id=%s", id))
	}
	return show, err
}

func getShowByID(ctx context.Context, db internal.Database, ID uuid.UUID) (internal.Show, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Show{}, err
	}
	defer tx.Rollback()

	result, err := getShowByIDInTx(ctx, tx, ID)
	if err != nil {
		return internal.Show{}, err
	}

	tx.Commit()
	return result, nil
}

func insertShowInTx(ctx context.Context, tx internal.Tx, show internal.Show) (internal.Show, error) {
	newShow := show
	claims, err := context1.GetAuthClaims(ctx)
	if err != nil {
		return internal.Show{}, err
	}
	now := time.Now()
	newShow.CreatedAt = now
	newShow.CreatedByUserID = claims.UserID
	newShow.UpdatedAt = now
	newShow.UpdatedByUserID = claims.UserID
	newShow.DeletedAt = nil
	newShow.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO shows(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, name, original_name, website, image) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)",
		newShow.ID, newShow.CreatedAt, newShow.CreatedByUserID, newShow.UpdatedAt, newShow.UpdatedByUserID, newShow.DeletedAt, newShow.DeletedByUserID, newShow.Name, newShow.OriginalName, newShow.Website, newShow.Image,
	)
	if err != nil {
		return internal.Show{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Show{}, err
	}
	if changedRows != 1 {
		return internal.Show{}, fmt.Errorf("Inserted more than 1 row (%d)", changedRows)
	}
	return newShow, err
}

func insertShow(ctx context.Context, db internal.Database, show internal.Show) (internal.Show, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Show{}, err
	}
	defer tx.Rollback()

	result, err := insertShowInTx(ctx, tx, show)
	if err != nil {
		return internal.Show{}, err
	}

	tx.Commit()
	return result, nil
}

func updateShowInTx(ctx context.Context, tx internal.Tx, inputShow internal.Show) (internal.Show, error) {
	updatedShow := inputShow
	claims, err := context1.GetAuthClaims(ctx)
	if err != nil {
		return internal.Show{}, err
	}
	now := time.Now()
	updatedShow.UpdatedAt = now
	updatedShow.UpdatedByUserID = claims.UserID
	result, err := tx.ExecContext(
		ctx,
		"UPDATE shows SET created_at=$1, created_by_user_id=$2, updated_at=$3, updated_by_user_id=$4, deleted_at=$5, deleted_by_user_id=$6, name=$7, original_name=$8, website=$9, image=$10 WHERE id = $11",
		updatedShow.CreatedAt, updatedShow.CreatedByUserID, updatedShow.UpdatedAt, updatedShow.UpdatedByUserID, updatedShow.DeletedAt, updatedShow.DeletedByUserID, updatedShow.Name, updatedShow.OriginalName, updatedShow.Website, updatedShow.Image, updatedShow.ID,
	)
	if err != nil {
		return internal.Show{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Show{}, err
	}
	if changedRows != 1 {
		return internal.Show{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedShow, err
}

func updateShow(ctx context.Context, db internal.Database, show internal.Show) (internal.Show, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Show{}, err
	}
	defer tx.Rollback()

	result, err := updateShowInTx(ctx, tx, show)
	if err != nil {
		return internal.Show{}, err
	}

	tx.Commit()
	return result, nil
}

func deleteShowInTx(ctx context.Context, tx internal.Tx, inputShow internal.Show) (internal.Show, error) {
	// Don't delete it if it's already deleted
	if inputShow.DeletedAt != nil && inputShow.DeletedByUserID != nil {
		return inputShow, nil
	}

	updatedShow := inputShow
	claims, err := context1.GetAuthClaims(ctx)
	if err != nil {
		return internal.Show{}, err
	}
	now := time.Now()
	updatedShow.UpdatedAt = now
	updatedShow.UpdatedByUserID = claims.UserID
	updatedShow.DeletedAt = &now
	updatedShow.DeletedByUserID = &claims.UserID
	result, err := tx.ExecContext(
		ctx,
		"UPDATE shows SET created_at=$1, created_by_user_id=$2, updated_at=$3, updated_by_user_id=$4, deleted_at=$5, deleted_by_user_id=$6, name=$7, original_name=$8, website=$9, image=$10 WHERE id = $11",
		updatedShow.CreatedAt, updatedShow.CreatedByUserID, updatedShow.UpdatedAt, updatedShow.UpdatedByUserID, updatedShow.DeletedAt, updatedShow.DeletedByUserID, updatedShow.Name, updatedShow.OriginalName, updatedShow.Website, updatedShow.Image, updatedShow.ID,
	)
	if err != nil {
		return internal.Show{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Show{}, err
	}
	if changedRows != 1 {
		return internal.Show{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedShow, err
}
