// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	"context"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getPreferencesByID(ctx context.Context, db internal.Database, id uuid.UUID) (internal.Preferences, error) {
	var preferences internal.Preferences
	err := db.GetContext(ctx, &preferences, "SELECT * FROM preferences WHERE id=$1", id)
	return preferences, err
}

func getPreferencesByUserID(ctx context.Context, db internal.Database, userID uuid.UUID) (internal.Preferences, error) {
	var preferences internal.Preferences
	err := db.GetContext(ctx, &preferences, "SELECT * FROM preferences WHERE user_id=$1 AND deleted_at IS NULL", userID)
	return preferences, err
}

func getUnscopedPreferencesByUserID(ctx context.Context, db internal.Database, userID uuid.UUID) (internal.Preferences, error) {
	var preferences internal.Preferences
	err := db.GetContext(ctx, &preferences, "SELECT * FROM preferences WHERE user_id=$1", userID)
	return preferences, err
}

// Inserts a Preferences, filling out it's created at and updated at metadata
func insertPreferencesInTx(ctx context.Context, tx *sqlx.Tx, preferences internal.Preferences) (internal.Preferences, error) {
	newPreferences := preferences
	newPreferences.CreatedAt = time.Now()
	newPreferences.UpdatedAt = time.Now()
	newPreferences.DeletedAt = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO preferences(id, created_at, updated_at, deleted_at, user_id, enable_auto_skip, enable_auto_play, minimize_toolbar_when_editing, hide_timeline_when_minimized, color_theme, skip_branding, skip_intros, skip_new_intros, skip_mixed_intros, skip_recaps, skip_filler, skip_canon, skip_transitions, skip_credits, skip_new_credits, skip_mixed_credits, skip_preview, skip_title_card) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23)",
		newPreferences.ID, newPreferences.CreatedAt, newPreferences.UpdatedAt, newPreferences.DeletedAt, newPreferences.UserID, newPreferences.EnableAutoSkip, newPreferences.EnableAutoPlay, newPreferences.MinimizeToolbarWhenEditing, newPreferences.HideTimelineWhenMinimized, newPreferences.ColorTheme, newPreferences.SkipBranding, newPreferences.SkipIntros, newPreferences.SkipNewIntros, newPreferences.SkipMixedIntros, newPreferences.SkipRecaps, newPreferences.SkipFiller, newPreferences.SkipCanon, newPreferences.SkipTransitions, newPreferences.SkipCredits, newPreferences.SkipNewCredits, newPreferences.SkipMixedCredits, newPreferences.SkipPreview, newPreferences.SkipTitleCard,
	)
	if err != nil {
		return internal.Preferences{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Preferences{}, err
	}
	if changedRows != 1 {
		return internal.Preferences{}, fmt.Errorf("Inserted %d rows, not 1", changedRows)
	}
	return newPreferences, err
}
