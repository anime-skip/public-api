// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getAPIClientByID(ctx context.Context, db internal.Database, id string) (internal.APIClient, error) {
	var apiClient internal.APIClient
	err := db.GetContext(ctx, &apiClient, "SELECT * FROM api_clients WHERE id=$1", id)
	return apiClient, err
}

func getAPIClientsByUserID(ctx context.Context, db internal.Database, userID uuid.UUID) ([]internal.APIClient, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM api_clients WHERE deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	apiClients := []internal.APIClient{}
	for rows.Next() {
		var apiClient internal.APIClient
		err = rows.StructScan(&apiClient)
		if err != nil {
			return nil, err
		}
		apiClients = append(apiClients, apiClient)
	}
	return apiClients, nil
}

func getUnscopedAPIClientsByUserID(ctx context.Context, db internal.Database, userID uuid.UUID) ([]internal.APIClient, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM api_clients")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	apiClients := []internal.APIClient{}
	for rows.Next() {
		var apiClient internal.APIClient
		err = rows.StructScan(&apiClient)
		if err != nil {
			return nil, err
		}
		apiClients = append(apiClients, apiClient)
	}
	return apiClients, nil
}

// Inserts a APIClient, filling out it's created at and updated at metadata
func insertAPIClientInTx(ctx context.Context, tx *sqlx.Tx, apiClient internal.APIClient) (internal.APIClient, error) {
	newAPIClient := apiClient
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.APIClient{}, err
	}
	newAPIClient.CreatedAt = time.Now()
	newAPIClient.CreatedByUserID = auth.UserID
	newAPIClient.UpdatedAt = time.Now()
	newAPIClient.UpdatedByUserID = auth.UserID
	newAPIClient.DeletedAt = nil
	newAPIClient.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO api_clients(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, user_id, app_name, description, allowed_origins, rate_limit_rpm) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)",
		newAPIClient.ID, newAPIClient.CreatedAt, newAPIClient.CreatedByUserID, newAPIClient.UpdatedAt, newAPIClient.UpdatedByUserID, newAPIClient.DeletedAt, newAPIClient.DeletedByUserID, newAPIClient.UserID, newAPIClient.AppName, newAPIClient.Description, newAPIClient.AllowedOrigins, newAPIClient.RateLimitRPM,
	)
	if err != nil {
		return internal.APIClient{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.APIClient{}, err
	}
	if changedRows != 1 {
		return internal.APIClient{}, fmt.Errorf("Inserted %d rows, not 1", changedRows)
	}
	return newAPIClient, err
}
