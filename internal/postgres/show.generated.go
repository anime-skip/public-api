// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getShowByID(ctx context.Context, db internal.Database, id uuid.UUID) (internal.Show, error) {
	var show internal.Show
	err := db.GetContext(ctx, &show, "SELECT * FROM shows WHERE id=$1", id)
	return show, err
}

// Inserts a Show, filling out it's created at and updated at metadata
func insertShowInTx(ctx context.Context, tx *sqlx.Tx, show internal.Show) (internal.Show, error) {
	newShow := show
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.Show{}, err
	}
	newShow.CreatedAt = time.Now()
	newShow.CreatedByUserID = auth.UserID
	newShow.UpdatedAt = time.Now()
	newShow.UpdatedByUserID = auth.UserID
	newShow.DeletedAt = nil
	newShow.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO shows(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, name, original_name, website, image) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)",
		newShow.ID, newShow.CreatedAt, newShow.CreatedByUserID, newShow.UpdatedAt, newShow.UpdatedByUserID, newShow.DeletedAt, newShow.DeletedByUserID, newShow.Name, newShow.OriginalName, newShow.Website, newShow.Image,
	)
	if err != nil {
		return internal.Show{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Show{}, err
	}
	if changedRows != 1 {
		return internal.Show{}, fmt.Errorf("Inserted %d rows, not 1", changedRows)
	}
	return newShow, err
}
