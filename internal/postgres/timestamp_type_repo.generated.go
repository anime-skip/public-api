// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"database/sql"
	"errors"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getTimestampTypeByID(ctx context.Context, db internal.Database, id uuid.UUID) (internal.TimestampType, error) {
	var timestampType internal.TimestampType
	err := db.GetContext(ctx, &timestampType, "SELECT * FROM timestamp_types WHERE id=$1", id)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.TimestampType{}, errors.New("record not found")
	}
	return timestampType, err
}

func insertTimestampTypeInTx(ctx context.Context, tx *sqlx.Tx, timestampType internal.TimestampType) (internal.TimestampType, error) {
	newTimestampType := timestampType
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.TimestampType{}, err
	}
	newTimestampType.CreatedAt = time.Now()
	newTimestampType.CreatedByUserID = auth.UserID
	newTimestampType.UpdatedAt = time.Now()
	newTimestampType.UpdatedByUserID = auth.UserID
	newTimestampType.DeletedAt = nil
	newTimestampType.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO timestamp_types(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, name, description) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)",
		newTimestampType.ID, newTimestampType.CreatedAt, newTimestampType.CreatedByUserID, newTimestampType.UpdatedAt, newTimestampType.UpdatedByUserID, newTimestampType.DeletedAt, newTimestampType.DeletedByUserID, newTimestampType.Name, newTimestampType.Description,
	)
	if err != nil {
		return internal.TimestampType{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.TimestampType{}, err
	}
	if changedRows != 1 {
		return internal.TimestampType{}, fmt.Errorf("Inserted more than 1 row (%d)", changedRows)
	}
	return newTimestampType, err
}

func insertTimestampType(ctx context.Context, db internal.Database, timestampType internal.TimestampType) (internal.TimestampType, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.TimestampType{}, err
	}
	defer tx.Rollback()

	result, err := insertTimestampTypeInTx(ctx, tx, timestampType)
	if err != nil {
		return internal.TimestampType{}, err
	}

	tx.Commit()
	return result, nil
}

func updateTimestampTypeInTx(ctx context.Context, tx *sqlx.Tx, newTimestampType internal.TimestampType) (internal.TimestampType, error) {
	updatedTimestampType := newTimestampType
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.TimestampType{}, err
	}
	updatedTimestampType.UpdatedAt = time.Now()
	updatedTimestampType.UpdatedByUserID = auth.UserID
	result, err := tx.ExecContext(
		ctx,
		"UPDATE timestamp_types SET id=$1, created_at=$2, created_by_user_id=$3, updated_at=$4, updated_by_user_id=$5, deleted_at=$6, deleted_by_user_id=$7, name=$8, description=$9",
		updatedTimestampType.ID, updatedTimestampType.CreatedAt, updatedTimestampType.CreatedByUserID, updatedTimestampType.UpdatedAt, updatedTimestampType.UpdatedByUserID, updatedTimestampType.DeletedAt, updatedTimestampType.DeletedByUserID, updatedTimestampType.Name, updatedTimestampType.Description,
	)
	if err != nil {
		return internal.TimestampType{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.TimestampType{}, err
	}
	if changedRows != 1 {
		return internal.TimestampType{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedTimestampType, err
}

func updateTimestampType(ctx context.Context, db internal.Database, timestampType internal.TimestampType) (internal.TimestampType, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.TimestampType{}, err
	}
	defer tx.Rollback()

	result, err := updateTimestampTypeInTx(ctx, tx, timestampType)
	if err != nil {
		return internal.TimestampType{}, err
	}

	tx.Commit()
	return result, nil
}

func deleteTimestampTypeInTx(ctx context.Context, tx *sqlx.Tx, newTimestampType internal.TimestampType) (internal.TimestampType, error) {
	deletedTimestampType := newTimestampType
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.TimestampType{}, err
	}
	deletedTimestampType.UpdatedAt = time.Now()
	deletedTimestampType.UpdatedByUserID = auth.UserID
	now := time.Now()
	deletedTimestampType.DeletedAt = &now
	deletedTimestampType.DeletedByUserID = &auth.UserID
	result, err := tx.ExecContext(ctx, "DELETE FROM timestamp_types WHERE id=$1", deletedTimestampType.ID)
	if err != nil {
		return internal.TimestampType{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.TimestampType{}, err
	}
	if changedRows != 1 {
		return internal.TimestampType{}, fmt.Errorf("Deleted more than 1 row (%d)", changedRows)
	}
	return deletedTimestampType, err
}

func deleteTimestampType(ctx context.Context, db internal.Database, timestampType internal.TimestampType) (internal.TimestampType, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.TimestampType{}, err
	}
	defer tx.Rollback()

	result, err := deleteTimestampTypeInTx(ctx, tx, timestampType)
	if err != nil {
		return internal.TimestampType{}, err
	}

	tx.Commit()
	return result, nil
}
