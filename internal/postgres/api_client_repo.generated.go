// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	errors1 "anime-skip.com/timestamps-service/internal/errors"
	"context"
	"database/sql"
	"errors"
	"fmt"
	uuid "github.com/gofrs/uuid"
	"time"
)

func getAPIClientByIDInTx(ctx context.Context, tx internal.Tx, id string) (internal.APIClient, error) {
	var apiClient internal.APIClient
	err := tx.GetContext(ctx, &apiClient, "SELECT * FROM api_clients WHERE id=$1", id)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.APIClient{}, errors1.NewRecordNotFound(fmt.Sprintf("APIClient.id=%s", id))
	}
	return apiClient, err
}

func getAPIClientByID(ctx context.Context, db internal.Database, ID string) (internal.APIClient, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.APIClient{}, err
	}
	defer tx.Rollback()

	result, err := getAPIClientByIDInTx(ctx, tx, ID)
	if err != nil {
		return internal.APIClient{}, err
	}

	tx.Commit()
	return result, nil
}

func getAPIClientsByUserIDInTx(ctx context.Context, tx internal.Tx, userID uuid.UUID) ([]internal.APIClient, error) {
	rows, err := tx.QueryxContext(ctx, "SELECT * FROM api_clients WHERE deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	apiClients := []internal.APIClient{}
	for rows.Next() {
		var apiClient internal.APIClient
		err = rows.StructScan(&apiClient)
		if err != nil {
			return nil, err
		}
		apiClients = append(apiClients, apiClient)
	}
	return apiClients, nil
}

func getAPIClientsByUserID(ctx context.Context, db internal.Database, UserID uuid.UUID) ([]internal.APIClient, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()

	result, err := getAPIClientsByUserIDInTx(ctx, tx, UserID)
	if err != nil {
		return nil, err
	}

	tx.Commit()
	return result, nil
}

func getUnscopedAPIClientsByUserIDInTx(ctx context.Context, tx internal.Tx, userID uuid.UUID) ([]internal.APIClient, error) {
	rows, err := tx.QueryxContext(ctx, "SELECT * FROM api_clients")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	apiClients := []internal.APIClient{}
	for rows.Next() {
		var apiClient internal.APIClient
		err = rows.StructScan(&apiClient)
		if err != nil {
			return nil, err
		}
		apiClients = append(apiClients, apiClient)
	}
	return apiClients, nil
}

func getUnscopedAPIClientsByUserID(ctx context.Context, db internal.Database, UserID uuid.UUID) ([]internal.APIClient, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()

	result, err := getUnscopedAPIClientsByUserIDInTx(ctx, tx, UserID)
	if err != nil {
		return nil, err
	}

	tx.Commit()
	return result, nil
}

func insertAPIClientInTx(ctx context.Context, tx internal.Tx, apiClient internal.APIClient) (internal.APIClient, error) {
	newAPIClient := apiClient
	claims, err := context1.GetAuthClaims(ctx)
	if err != nil {
		return internal.APIClient{}, err
	}
	now := time.Now()
	newAPIClient.CreatedAt = now
	newAPIClient.CreatedByUserID = claims.UserID
	newAPIClient.UpdatedAt = now
	newAPIClient.UpdatedByUserID = claims.UserID
	newAPIClient.DeletedAt = nil
	newAPIClient.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO api_clients(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, user_id, app_name, description, allowed_origins, rate_limit_rpm) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)",
		newAPIClient.ID, newAPIClient.CreatedAt, newAPIClient.CreatedByUserID, newAPIClient.UpdatedAt, newAPIClient.UpdatedByUserID, newAPIClient.DeletedAt, newAPIClient.DeletedByUserID, newAPIClient.UserID, newAPIClient.AppName, newAPIClient.Description, newAPIClient.AllowedOrigins, newAPIClient.RateLimitRPM,
	)
	if err != nil {
		return internal.APIClient{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.APIClient{}, err
	}
	if changedRows != 1 {
		return internal.APIClient{}, fmt.Errorf("Inserted more than 1 row (%d)", changedRows)
	}
	return newAPIClient, err
}

func insertAPIClient(ctx context.Context, db internal.Database, apiClient internal.APIClient) (internal.APIClient, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.APIClient{}, err
	}
	defer tx.Rollback()

	result, err := insertAPIClientInTx(ctx, tx, apiClient)
	if err != nil {
		return internal.APIClient{}, err
	}

	tx.Commit()
	return result, nil
}

func updateAPIClientInTx(ctx context.Context, tx internal.Tx, newAPIClient internal.APIClient) (internal.APIClient, error) {
	updatedAPIClient := newAPIClient
	claims, err := context1.GetAuthClaims(ctx)
	if err != nil {
		return internal.APIClient{}, err
	}
	now := time.Now()
	updatedAPIClient.UpdatedAt = now
	updatedAPIClient.UpdatedByUserID = claims.UserID
	result, err := tx.ExecContext(
		ctx,
		"UPDATE api_clients SET created_at=$1, created_by_user_id=$2, updated_at=$3, updated_by_user_id=$4, deleted_at=$5, deleted_by_user_id=$6, user_id=$7, app_name=$8, description=$9, allowed_origins=$10, rate_limit_rpm=$11 WHERE id = $12",
		updatedAPIClient.CreatedAt, updatedAPIClient.CreatedByUserID, updatedAPIClient.UpdatedAt, updatedAPIClient.UpdatedByUserID, updatedAPIClient.DeletedAt, updatedAPIClient.DeletedByUserID, updatedAPIClient.UserID, updatedAPIClient.AppName, updatedAPIClient.Description, updatedAPIClient.AllowedOrigins, updatedAPIClient.RateLimitRPM, updatedAPIClient.ID,
	)
	if err != nil {
		return internal.APIClient{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.APIClient{}, err
	}
	if changedRows != 1 {
		return internal.APIClient{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedAPIClient, err
}

func updateAPIClient(ctx context.Context, db internal.Database, apiClient internal.APIClient) (internal.APIClient, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.APIClient{}, err
	}
	defer tx.Rollback()

	result, err := updateAPIClientInTx(ctx, tx, apiClient)
	if err != nil {
		return internal.APIClient{}, err
	}

	tx.Commit()
	return result, nil
}

func deleteAPIClientInTx(ctx context.Context, tx internal.Tx, newAPIClient internal.APIClient) (internal.APIClient, error) {
	updatedAPIClient := newAPIClient
	claims, err := context1.GetAuthClaims(ctx)
	if err != nil {
		return internal.APIClient{}, err
	}
	now := time.Now()
	updatedAPIClient.UpdatedAt = now
	updatedAPIClient.UpdatedByUserID = claims.UserID
	updatedAPIClient.DeletedAt = &now
	updatedAPIClient.DeletedByUserID = &claims.UserID
	result, err := tx.ExecContext(
		ctx,
		"UPDATE api_clients SET created_at=$1, created_by_user_id=$2, updated_at=$3, updated_by_user_id=$4, deleted_at=$5, deleted_by_user_id=$6, user_id=$7, app_name=$8, description=$9, allowed_origins=$10, rate_limit_rpm=$11 WHERE id = $12",
		updatedAPIClient.CreatedAt, updatedAPIClient.CreatedByUserID, updatedAPIClient.UpdatedAt, updatedAPIClient.UpdatedByUserID, updatedAPIClient.DeletedAt, updatedAPIClient.DeletedByUserID, updatedAPIClient.UserID, updatedAPIClient.AppName, updatedAPIClient.Description, updatedAPIClient.AllowedOrigins, updatedAPIClient.RateLimitRPM, updatedAPIClient.ID,
	)
	if err != nil {
		return internal.APIClient{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.APIClient{}, err
	}
	if changedRows != 1 {
		return internal.APIClient{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedAPIClient, err
}
