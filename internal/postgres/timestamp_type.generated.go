// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getTimestampTypeByID(ctx context.Context, db internal.Database, id uuid.UUID) (internal.TimestampType, error) {
	var timestampType internal.TimestampType
	err := db.GetContext(ctx, &timestampType, "SELECT * FROM timestamp_types WHERE id=$1", id)
	return timestampType, err
}

// Inserts a TimestampType, filling out it's created at and updated at metadata
func insertTimestampTypeInTx(ctx context.Context, tx *sqlx.Tx, timestampType internal.TimestampType) (internal.TimestampType, error) {
	newTimestampType := timestampType
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.TimestampType{}, err
	}
	newTimestampType.CreatedAt = time.Now()
	newTimestampType.CreatedByUserID = auth.UserID
	newTimestampType.UpdatedAt = time.Now()
	newTimestampType.UpdatedByUserID = auth.UserID
	newTimestampType.DeletedAt = nil
	newTimestampType.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO timestamp_types(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, name, description) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)",
		newTimestampType.ID, newTimestampType.CreatedAt, newTimestampType.CreatedByUserID, newTimestampType.UpdatedAt, newTimestampType.UpdatedByUserID, newTimestampType.DeletedAt, newTimestampType.DeletedByUserID, newTimestampType.Name, newTimestampType.Description,
	)
	if err != nil {
		return internal.TimestampType{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.TimestampType{}, err
	}
	if changedRows != 1 {
		return internal.TimestampType{}, fmt.Errorf("Inserted %d rows, not 1", changedRows)
	}
	return newTimestampType, err
}
