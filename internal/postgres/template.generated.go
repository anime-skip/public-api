// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getTemplateByID(ctx context.Context, db internal.Database, id uuid.UUID) (internal.Template, error) {
	var template internal.Template
	err := db.GetContext(ctx, &template, "SELECT * FROM templates WHERE id=$1", id)
	return template, err
}

func getTemplatesByShowID(ctx context.Context, db internal.Database, showID uuid.UUID) ([]internal.Template, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM templates WHERE deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	templates := []internal.Template{}
	for rows.Next() {
		var template internal.Template
		err = rows.StructScan(&template)
		if err != nil {
			return nil, err
		}
		templates = append(templates, template)
	}
	return templates, nil
}

func getUnscopedTemplatesByShowID(ctx context.Context, db internal.Database, showID uuid.UUID) ([]internal.Template, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM templates")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	templates := []internal.Template{}
	for rows.Next() {
		var template internal.Template
		err = rows.StructScan(&template)
		if err != nil {
			return nil, err
		}
		templates = append(templates, template)
	}
	return templates, nil
}

// Inserts a Template, filling out it's created at and updated at metadata
func insertTemplateInTx(ctx context.Context, tx *sqlx.Tx, template internal.Template) (internal.Template, error) {
	newTemplate := template
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.Template{}, err
	}
	newTemplate.CreatedAt = time.Now()
	newTemplate.CreatedByUserID = auth.UserID
	newTemplate.UpdatedAt = time.Now()
	newTemplate.UpdatedByUserID = auth.UserID
	newTemplate.DeletedAt = nil
	newTemplate.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO templates(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, show_id, type, seasons, source_episode_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)",
		newTemplate.ID, newTemplate.CreatedAt, newTemplate.CreatedByUserID, newTemplate.UpdatedAt, newTemplate.UpdatedByUserID, newTemplate.DeletedAt, newTemplate.DeletedByUserID, newTemplate.ShowID, newTemplate.Type, newTemplate.Seasons, newTemplate.SourceEpisodeID,
	)
	if err != nil {
		return internal.Template{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Template{}, err
	}
	if changedRows != 1 {
		return internal.Template{}, fmt.Errorf("Inserted %d rows, not 1", changedRows)
	}
	return newTemplate, err
}
