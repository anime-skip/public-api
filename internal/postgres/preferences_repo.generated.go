// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	errors1 "anime-skip.com/timestamps-service/internal/errors"
	"context"
	"database/sql"
	"errors"
	"fmt"
	uuid "github.com/gofrs/uuid"
	"time"
)

func getPreferencesByIDInTx(ctx context.Context, tx internal.Tx, id uuid.UUID) (internal.Preferences, error) {
	var preferences internal.Preferences
	err := tx.GetContext(ctx, &preferences, "SELECT * FROM preferences WHERE id=$1", id)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.Preferences{}, errors1.NewRecordNotFound(fmt.Sprintf("Preferences.id=%s", id))
	}
	return preferences, err
}

func getPreferencesByID(ctx context.Context, db internal.Database, ID uuid.UUID) (internal.Preferences, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Preferences{}, err
	}
	defer tx.Rollback()

	result, err := getPreferencesByIDInTx(ctx, tx, ID)
	if err != nil {
		return internal.Preferences{}, err
	}

	tx.Commit()
	return result, nil
}

func getPreferencesByUserIDInTx(ctx context.Context, tx internal.Tx, userID uuid.UUID) (internal.Preferences, error) {
	var preferences internal.Preferences
	err := tx.GetContext(ctx, &preferences, "SELECT * FROM preferences WHERE user_id=$1 AND deleted_at IS NULL", userID)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.Preferences{}, errors1.NewRecordNotFound(fmt.Sprintf("Preferences.userID=%s", userID))
	}
	return preferences, err
}

func getPreferencesByUserID(ctx context.Context, db internal.Database, UserID uuid.UUID) (internal.Preferences, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Preferences{}, err
	}
	defer tx.Rollback()

	result, err := getPreferencesByUserIDInTx(ctx, tx, UserID)
	if err != nil {
		return internal.Preferences{}, err
	}

	tx.Commit()
	return result, nil
}

func getUnscopedPreferencesByUserIDInTx(ctx context.Context, tx internal.Tx, userID uuid.UUID) (internal.Preferences, error) {
	var preferences internal.Preferences
	err := tx.GetContext(ctx, &preferences, "SELECT * FROM preferences WHERE user_id=$1", userID)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.Preferences{}, errors1.NewRecordNotFound(fmt.Sprintf("Preferences.userID=%s", userID))
	}
	return preferences, err
}

func getUnscopedPreferencesByUserID(ctx context.Context, db internal.Database, UserID uuid.UUID) (internal.Preferences, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Preferences{}, err
	}
	defer tx.Rollback()

	result, err := getUnscopedPreferencesByUserIDInTx(ctx, tx, UserID)
	if err != nil {
		return internal.Preferences{}, err
	}

	tx.Commit()
	return result, nil
}

func insertPreferencesInTx(ctx context.Context, tx internal.Tx, preferences internal.Preferences) (internal.Preferences, error) {
	newPreferences := preferences
	now := time.Now()
	newPreferences.CreatedAt = now
	newPreferences.UpdatedAt = now
	newPreferences.DeletedAt = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO preferences(id, created_at, updated_at, deleted_at, user_id, enable_auto_skip, enable_auto_play, minimize_toolbar_when_editing, hide_timeline_when_minimized, color_theme, skip_branding, skip_intros, skip_new_intros, skip_mixed_intros, skip_recaps, skip_filler, skip_canon, skip_transitions, skip_credits, skip_new_credits, skip_mixed_credits, skip_preview, skip_title_card) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23)",
		newPreferences.ID, newPreferences.CreatedAt, newPreferences.UpdatedAt, newPreferences.DeletedAt, newPreferences.UserID, newPreferences.EnableAutoSkip, newPreferences.EnableAutoPlay, newPreferences.MinimizeToolbarWhenEditing, newPreferences.HideTimelineWhenMinimized, newPreferences.ColorTheme, newPreferences.SkipBranding, newPreferences.SkipIntros, newPreferences.SkipNewIntros, newPreferences.SkipMixedIntros, newPreferences.SkipRecaps, newPreferences.SkipFiller, newPreferences.SkipCanon, newPreferences.SkipTransitions, newPreferences.SkipCredits, newPreferences.SkipNewCredits, newPreferences.SkipMixedCredits, newPreferences.SkipPreview, newPreferences.SkipTitleCard,
	)
	if err != nil {
		return internal.Preferences{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Preferences{}, err
	}
	if changedRows != 1 {
		return internal.Preferences{}, fmt.Errorf("Inserted more than 1 row (%d)", changedRows)
	}
	return newPreferences, err
}

func insertPreferences(ctx context.Context, db internal.Database, preferences internal.Preferences) (internal.Preferences, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Preferences{}, err
	}
	defer tx.Rollback()

	result, err := insertPreferencesInTx(ctx, tx, preferences)
	if err != nil {
		return internal.Preferences{}, err
	}

	tx.Commit()
	return result, nil
}

func updatePreferencesInTx(ctx context.Context, tx internal.Tx, inputPreferences internal.Preferences) (internal.Preferences, error) {
	updatedPreferences := inputPreferences
	now := time.Now()
	updatedPreferences.UpdatedAt = now
	result, err := tx.ExecContext(
		ctx,
		"UPDATE preferences SET created_at=$1, updated_at=$2, deleted_at=$3, user_id=$4, enable_auto_skip=$5, enable_auto_play=$6, minimize_toolbar_when_editing=$7, hide_timeline_when_minimized=$8, color_theme=$9, skip_branding=$10, skip_intros=$11, skip_new_intros=$12, skip_mixed_intros=$13, skip_recaps=$14, skip_filler=$15, skip_canon=$16, skip_transitions=$17, skip_credits=$18, skip_new_credits=$19, skip_mixed_credits=$20, skip_preview=$21, skip_title_card=$22 WHERE id = $23",
		updatedPreferences.CreatedAt, updatedPreferences.UpdatedAt, updatedPreferences.DeletedAt, updatedPreferences.UserID, updatedPreferences.EnableAutoSkip, updatedPreferences.EnableAutoPlay, updatedPreferences.MinimizeToolbarWhenEditing, updatedPreferences.HideTimelineWhenMinimized, updatedPreferences.ColorTheme, updatedPreferences.SkipBranding, updatedPreferences.SkipIntros, updatedPreferences.SkipNewIntros, updatedPreferences.SkipMixedIntros, updatedPreferences.SkipRecaps, updatedPreferences.SkipFiller, updatedPreferences.SkipCanon, updatedPreferences.SkipTransitions, updatedPreferences.SkipCredits, updatedPreferences.SkipNewCredits, updatedPreferences.SkipMixedCredits, updatedPreferences.SkipPreview, updatedPreferences.SkipTitleCard, updatedPreferences.ID,
	)
	if err != nil {
		return internal.Preferences{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Preferences{}, err
	}
	if changedRows != 1 {
		return internal.Preferences{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedPreferences, err
}

func updatePreferences(ctx context.Context, db internal.Database, preferences internal.Preferences) (internal.Preferences, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Preferences{}, err
	}
	defer tx.Rollback()

	result, err := updatePreferencesInTx(ctx, tx, preferences)
	if err != nil {
		return internal.Preferences{}, err
	}

	tx.Commit()
	return result, nil
}

func deletePreferencesInTx(ctx context.Context, tx internal.Tx, inputPreferences internal.Preferences) (internal.Preferences, error) {
	// Don't delete it if it's already deleted
	if inputPreferences.DeletedAt != nil {
		return inputPreferences, nil
	}

	updatedPreferences := inputPreferences
	now := time.Now()
	updatedPreferences.UpdatedAt = now
	updatedPreferences.DeletedAt = &now
	result, err := tx.ExecContext(
		ctx,
		"UPDATE preferences SET created_at=$1, updated_at=$2, deleted_at=$3, user_id=$4, enable_auto_skip=$5, enable_auto_play=$6, minimize_toolbar_when_editing=$7, hide_timeline_when_minimized=$8, color_theme=$9, skip_branding=$10, skip_intros=$11, skip_new_intros=$12, skip_mixed_intros=$13, skip_recaps=$14, skip_filler=$15, skip_canon=$16, skip_transitions=$17, skip_credits=$18, skip_new_credits=$19, skip_mixed_credits=$20, skip_preview=$21, skip_title_card=$22 WHERE id = $23",
		updatedPreferences.CreatedAt, updatedPreferences.UpdatedAt, updatedPreferences.DeletedAt, updatedPreferences.UserID, updatedPreferences.EnableAutoSkip, updatedPreferences.EnableAutoPlay, updatedPreferences.MinimizeToolbarWhenEditing, updatedPreferences.HideTimelineWhenMinimized, updatedPreferences.ColorTheme, updatedPreferences.SkipBranding, updatedPreferences.SkipIntros, updatedPreferences.SkipNewIntros, updatedPreferences.SkipMixedIntros, updatedPreferences.SkipRecaps, updatedPreferences.SkipFiller, updatedPreferences.SkipCanon, updatedPreferences.SkipTransitions, updatedPreferences.SkipCredits, updatedPreferences.SkipNewCredits, updatedPreferences.SkipMixedCredits, updatedPreferences.SkipPreview, updatedPreferences.SkipTitleCard, updatedPreferences.ID,
	)
	if err != nil {
		return internal.Preferences{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Preferences{}, err
	}
	if changedRows != 1 {
		return internal.Preferences{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedPreferences, err
}
