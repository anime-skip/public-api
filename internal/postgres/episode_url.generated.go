// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getEpisodeURLByURL(ctx context.Context, db internal.Database, url string) (internal.EpisodeURL, error) {
	var episodeURL internal.EpisodeURL
	err := db.GetContext(ctx, &episodeURL, "SELECT * FROM episode_urls WHERE url=$1", url)
	return episodeURL, err
}

func getEpisodeURLsByEpisodeID(ctx context.Context, db internal.Database, episodeID uuid.UUID) ([]internal.EpisodeURL, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM episode_urls")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	episodeURLs := []internal.EpisodeURL{}
	for rows.Next() {
		var episodeURL internal.EpisodeURL
		err = rows.StructScan(&episodeURL)
		if err != nil {
			return nil, err
		}
		episodeURLs = append(episodeURLs, episodeURL)
	}
	return episodeURLs, nil
}

// Inserts a EpisodeURL, filling out it's created at and updated at metadata
func insertEpisodeURLInTx(ctx context.Context, tx *sqlx.Tx, episodeURL internal.EpisodeURL) (internal.EpisodeURL, error) {
	newEpisodeURL := episodeURL
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.EpisodeURL{}, err
	}
	newEpisodeURL.CreatedAt = time.Now()
	newEpisodeURL.CreatedByUserID = auth.UserID
	newEpisodeURL.UpdatedAt = time.Now()
	newEpisodeURL.UpdatedByUserID = auth.UserID
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO episode_urls(url, created_at, created_by_user_id, updated_at, updated_by_user_id, source, duration, timestamps_offset, episode_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)",
		newEpisodeURL.URL, newEpisodeURL.CreatedAt, newEpisodeURL.CreatedByUserID, newEpisodeURL.UpdatedAt, newEpisodeURL.UpdatedByUserID, newEpisodeURL.Source, newEpisodeURL.Duration, newEpisodeURL.TimestampsOffset, newEpisodeURL.EpisodeID,
	)
	if err != nil {
		return internal.EpisodeURL{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.EpisodeURL{}, err
	}
	if changedRows != 1 {
		return internal.EpisodeURL{}, fmt.Errorf("Inserted %d rows, not 1", changedRows)
	}
	return newEpisodeURL, err
}
