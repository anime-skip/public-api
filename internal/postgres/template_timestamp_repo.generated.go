// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/public-api/internal"
	errors1 "anime-skip.com/public-api/internal/errors"
	"context"
	"database/sql"
	"errors"
	"fmt"
	uuid "github.com/gofrs/uuid"
)

func getTemplateTimestampInTx(ctx context.Context, tx internal.Tx, templateID uuid.UUID, timestampID uuid.UUID) (internal.TemplateTimestamp, error) {
	var templateTimestamp internal.TemplateTimestamp
	err := tx.GetContext(ctx, &templateTimestamp, "SELECT * FROM template_timestamps WHERE template_id=$1 AND timestamp_id=$2", templateID, timestampID)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.TemplateTimestamp{}, errors1.NewRecordNotFound(fmt.Sprintf("TemplateTimestamp.templateID=%s and TemplateTimestamp.timestampID=%s", templateID, timestampID))
	}
	return templateTimestamp, err
}

func getTemplateTimestampByTimestampIDInTx(ctx context.Context, tx internal.Tx, timestampID uuid.UUID) (internal.TemplateTimestamp, error) {
	var templateTimestamp internal.TemplateTimestamp
	err := tx.GetContext(ctx, &templateTimestamp, "SELECT * FROM template_timestamps WHERE timestamp_id=$1", timestampID)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.TemplateTimestamp{}, errors1.NewRecordNotFound(fmt.Sprintf("TemplateTimestamp.timestampID=%s", timestampID))
	}
	return templateTimestamp, err
}

func getTemplateTimestampByTimestampID(ctx context.Context, db internal.Database, TimestampID uuid.UUID) (internal.TemplateTimestamp, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.TemplateTimestamp{}, err
	}
	defer tx.Rollback()

	result, err := getTemplateTimestampByTimestampIDInTx(ctx, tx, TimestampID)
	if err != nil {
		return internal.TemplateTimestamp{}, err
	}

	tx.Commit()
	return result, nil
}

func getTemplateTimestampsByTemplateIDInTx(ctx context.Context, tx internal.Tx, templateID uuid.UUID) ([]internal.TemplateTimestamp, error) {
	rows, err := tx.QueryxContext(ctx, "SELECT * FROM template_timestamps")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	templateTimestamps := []internal.TemplateTimestamp{}
	for rows.Next() {
		var templateTimestamp internal.TemplateTimestamp
		err = rows.StructScan(&templateTimestamp)
		if err != nil {
			return nil, err
		}
		templateTimestamps = append(templateTimestamps, templateTimestamp)
	}
	return templateTimestamps, nil
}

func getTemplateTimestampsByTemplateID(ctx context.Context, db internal.Database, TemplateID uuid.UUID) ([]internal.TemplateTimestamp, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return nil, err
	}
	defer tx.Rollback()

	result, err := getTemplateTimestampsByTemplateIDInTx(ctx, tx, TemplateID)
	if err != nil {
		return nil, err
	}

	tx.Commit()
	return result, nil
}

func insertTemplateTimestampInTx(ctx context.Context, tx internal.Tx, templateTimestamp internal.TemplateTimestamp) (internal.TemplateTimestamp, error) {
	newTemplateTimestamp := templateTimestamp
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO template_timestamps(template_id, timestamp_id) VALUES ($1, $2)",
		newTemplateTimestamp.TemplateID, newTemplateTimestamp.TimestampID,
	)
	if err != nil {
		return internal.TemplateTimestamp{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.TemplateTimestamp{}, err
	}
	if changedRows != 1 {
		return internal.TemplateTimestamp{}, fmt.Errorf("Inserted more than 1 row (%d)", changedRows)
	}
	return newTemplateTimestamp, err
}

func insertTemplateTimestamp(ctx context.Context, db internal.Database, templateTimestamp internal.TemplateTimestamp) (internal.TemplateTimestamp, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.TemplateTimestamp{}, err
	}
	defer tx.Rollback()

	result, err := insertTemplateTimestampInTx(ctx, tx, templateTimestamp)
	if err != nil {
		return internal.TemplateTimestamp{}, err
	}

	tx.Commit()
	return result, nil
}

// Hard delete the TemplateTimestamp. It requires the entire model be passed in so that you have it before calling this function, and can return the value if needed
func deleteTemplateTimestampInTx(ctx context.Context, tx internal.Tx, templateTimestamp internal.TemplateTimestamp) error {
	result, err := tx.ExecContext(ctx, "DELETE FROM template_timestamps WHERE template_id=$1 AND timestamp_id=$2", templateTimestamp.TemplateID, templateTimestamp.TimestampID)
	if err != nil {
		return err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if changedRows != 1 {
		return fmt.Errorf("Deleted more than 1 row (%d)", changedRows)
	}
	return err
}
