// Code generated by cmd/sqlgen/main.go, DO NOT EDIT.

package postgres

import (
	internal "anime-skip.com/timestamps-service/internal"
	context1 "anime-skip.com/timestamps-service/internal/context"
	"context"
	"database/sql"
	"errors"
	"fmt"
	uuid "github.com/gofrs/uuid"
	sqlx "github.com/jmoiron/sqlx"
	"time"
)

func getTemplateByID(ctx context.Context, db internal.Database, id uuid.UUID) (internal.Template, error) {
	var template internal.Template
	err := db.GetContext(ctx, &template, "SELECT * FROM templates WHERE id=$1", id)
	if errors.Is(err, sql.ErrNoRows) {
		return internal.Template{}, errors.New("record not found")
	}
	return template, err
}

func getTemplatesByShowID(ctx context.Context, db internal.Database, showID uuid.UUID) ([]internal.Template, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM templates WHERE deleted_at IS NULL")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	templates := []internal.Template{}
	for rows.Next() {
		var template internal.Template
		err = rows.StructScan(&template)
		if err != nil {
			return nil, err
		}
		templates = append(templates, template)
	}
	return templates, nil
}

func getUnscopedTemplatesByShowID(ctx context.Context, db internal.Database, showID uuid.UUID) ([]internal.Template, error) {
	rows, err := db.QueryxContext(ctx, "SELECT * FROM templates")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	templates := []internal.Template{}
	for rows.Next() {
		var template internal.Template
		err = rows.StructScan(&template)
		if err != nil {
			return nil, err
		}
		templates = append(templates, template)
	}
	return templates, nil
}

func insertTemplateInTx(ctx context.Context, tx *sqlx.Tx, template internal.Template) (internal.Template, error) {
	newTemplate := template
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.Template{}, err
	}
	newTemplate.CreatedAt = time.Now()
	newTemplate.CreatedByUserID = auth.UserID
	newTemplate.UpdatedAt = time.Now()
	newTemplate.UpdatedByUserID = auth.UserID
	newTemplate.DeletedAt = nil
	newTemplate.DeletedByUserID = nil
	result, err := tx.ExecContext(
		ctx,
		"INSERT INTO templates(id, created_at, created_by_user_id, updated_at, updated_by_user_id, deleted_at, deleted_by_user_id, show_id, type, seasons, source_episode_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)",
		newTemplate.ID, newTemplate.CreatedAt, newTemplate.CreatedByUserID, newTemplate.UpdatedAt, newTemplate.UpdatedByUserID, newTemplate.DeletedAt, newTemplate.DeletedByUserID, newTemplate.ShowID, newTemplate.Type, newTemplate.Seasons, newTemplate.SourceEpisodeID,
	)
	if err != nil {
		return internal.Template{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Template{}, err
	}
	if changedRows != 1 {
		return internal.Template{}, fmt.Errorf("Inserted more than 1 row (%d)", changedRows)
	}
	return newTemplate, err
}

func insertTemplate(ctx context.Context, db internal.Database, template internal.Template) (internal.Template, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Template{}, err
	}
	defer tx.Rollback()

	result, err := insertTemplateInTx(ctx, tx, template)
	if err != nil {
		return internal.Template{}, err
	}

	tx.Commit()
	return result, nil
}

func updateTemplateInTx(ctx context.Context, tx *sqlx.Tx, newTemplate internal.Template) (internal.Template, error) {
	updatedTemplate := newTemplate
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.Template{}, err
	}
	updatedTemplate.UpdatedAt = time.Now()
	updatedTemplate.UpdatedByUserID = auth.UserID
	result, err := tx.ExecContext(
		ctx,
		"UPDATE templates SET id=$1, created_at=$2, created_by_user_id=$3, updated_at=$4, updated_by_user_id=$5, deleted_at=$6, deleted_by_user_id=$7, show_id=$8, type=$9, seasons=$10, source_episode_id=$11",
		updatedTemplate.ID, updatedTemplate.CreatedAt, updatedTemplate.CreatedByUserID, updatedTemplate.UpdatedAt, updatedTemplate.UpdatedByUserID, updatedTemplate.DeletedAt, updatedTemplate.DeletedByUserID, updatedTemplate.ShowID, updatedTemplate.Type, updatedTemplate.Seasons, updatedTemplate.SourceEpisodeID,
	)
	if err != nil {
		return internal.Template{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Template{}, err
	}
	if changedRows != 1 {
		return internal.Template{}, fmt.Errorf("Updated more than 1 row (%d)", changedRows)
	}
	return updatedTemplate, err
}

func updateTemplate(ctx context.Context, db internal.Database, template internal.Template) (internal.Template, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Template{}, err
	}
	defer tx.Rollback()

	result, err := updateTemplateInTx(ctx, tx, template)
	if err != nil {
		return internal.Template{}, err
	}

	tx.Commit()
	return result, nil
}

func deleteTemplateInTx(ctx context.Context, tx *sqlx.Tx, newTemplate internal.Template) (internal.Template, error) {
	deletedTemplate := newTemplate
	auth, err := context1.GetAuthenticationDetails(ctx)
	if err != nil {
		return internal.Template{}, err
	}
	deletedTemplate.UpdatedAt = time.Now()
	deletedTemplate.UpdatedByUserID = auth.UserID
	now := time.Now()
	deletedTemplate.DeletedAt = &now
	deletedTemplate.DeletedByUserID = &auth.UserID
	result, err := tx.ExecContext(ctx, "DELETE FROM templates WHERE id=$1", deletedTemplate.ID)
	if err != nil {
		return internal.Template{}, err
	}
	changedRows, err := result.RowsAffected()
	if err != nil {
		return internal.Template{}, err
	}
	if changedRows != 1 {
		return internal.Template{}, fmt.Errorf("Deleted more than 1 row (%d)", changedRows)
	}
	return deletedTemplate, err
}

func deleteTemplate(ctx context.Context, db internal.Database, template internal.Template) (internal.Template, error) {
	tx, err := db.BeginTxx(ctx, nil)
	if err != nil {
		return internal.Template{}, err
	}
	defer tx.Rollback()

	result, err := deleteTemplateInTx(ctx, tx, template)
	if err != nil {
		return internal.Template{}, err
	}

	tx.Commit()
	return result, nil
}
