name: Deploy
on:
  workflow_dispatch:
    inputs:
      mode:
        description: Environment (staged, prod)
        required: true
        default: staged

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_REPO: anime-skip/backend

jobs:
  verify:
    name: Verify Code
    runs-on: ubuntu-20.04
    steps:
      - 
        name: Install Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - 
        name: Checkout Repo
        uses: actions/checkout@v1
      - 
        name: Build
        run: make build
      - 
        name: Lint
        run: echo "TODO" # make lint
      - 
        name: Run Tests
        run: |
          ./.github/create-env.sh
          make test
      - 
        name: Run E2E Tests
        run: echo "TODO" # make e2e-test

  deploy-staged:
    name: Deploy Staged
    if: ${{ github.event.inputs.mode == 'staged' }}
    runs-on: ubuntu-20.04
    needs: verify
    steps:
      - 
        name: Checkout Repo
        uses: actions/checkout@v1
      - 
        name: Log into Heroku CLI
        uses: akhileshns/heroku-deploy@v3.7.8
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ""
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          justlogin: true
      - 
        name: Log into Heroku Docker Registry
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: ${{ secrets.HEROKU_EMAIL }}
          password: ${{ secrets.HEROKU_API_KEY }}
      - 
        name: Log into Github Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Build :staged
        run: |
          VERSION="$(jq -r .version meta.json)"
          VERSION_SUFFIX="$(TZ=UTC git --no-pager show --quiet --abbrev=12 --date='format-local:%Y%m%d%H%M%S' --format='%cd-%h')"
          docker build . \
            --build-arg VERSION=$VERSION \
            --build-arg VERSION_SUFFIX=$VERSION_SUFFIX \
            -t docker.pkg.github.com/anime-skip/backend/api:staged \
            -t registry.heroku.com/staged-api-service/web
      -
        name: Push :staged
        run: |
          docker push docker.pkg.github.com/anime-skip/backend/api:staged
          docker push registry.heroku.com/staged-api-service/web
      -
        name: Deploy :staged
        run: |
          heroku container:release -a staged-api-service web

  versioning:
    name: Bump Version
    if: ${{ github.event.inputs.mode == 'prod' }}
    runs-on: ubuntu-20.04
    needs: verify
    steps:
      - 
        name: Checkout Repo
        uses: actions/checkout@v1
        with:
          ref: main
          fetch-depth: 0
      - 
        name: Conventional Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.github_token }}
          release-count: 0 # 0 = all
          version-file: ./meta.json
          skip-commit: true
      - 
        name: Don't deploy
        if: ${{ steps.changelog.outputs.skipped == 'true' }}
        run: |
          echo "No changes found, stopping deployment"
          exit 1
      - 
        name: Checkout Repo's Wiki
        uses: actions/checkout@v2
        with:
          repository: anime-skip/backend.wiki
          path: wiki
      - 
        name: Append Old Changelog
        run: |
          OLD_CHANGELOG=$(cat $GITHUB_WORKSPACE/wiki/Pre-conventional-Commits-Changelog.md)
          echo "$OLD_CHANGELOG" >> CHANGELOG.md
          rm -rf $GITHUB_WORKSPACE/wiki
      - 
        name: Commit Version Change
        run: |
          git commit -am "chore(release): $TAG"
          git push origin main
        env:
          TAG: ${{ steps.changelog.outputs.tag }}
      - 
        name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

  deploy-prod:
    name: Deploy Prod
    runs-on: ubuntu-20.04
    needs: versioning
    steps:
      - 
        name: Checkout Repo
        uses: actions/checkout@v1
      - 
        name: Log into Heroku CLI
        uses: akhileshns/heroku-deploy@v3.7.8
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ""
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          justlogin: true
      - 
        name: Log into Heroku Docker Registry
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: ${{ secrets.HEROKU_EMAIL }}
          password: ${{ secrets.HEROKU_API_KEY }}
      - 
        name: Log into Github Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build :prod
        run: |
          VERSION="$(jq -r .version meta.json)"
          VERSION_SUFFIX="$(TZ=UTC git --no-pager show --quiet --abbrev=12 --date='format-local:%Y%m%d%H%M%S' --format='%cd-%h')"
          docker build . \
            --build-arg VERSION=$VERSION \
            --build-arg VERSION_SUFFIX=$VERSION_SUFFIX \
            -t docker.pkg.github.com/anime-skip/backend/api:prod \
            -t registry.heroku.com/prod-api-service/web \
            -t registry.heroku.com/prod-api-test-service/web
      -
        name: Push :prod
        run: |
          docker push docker.pkg.github.com/anime-skip/backend/api:prod
          docker push registry.heroku.com/prod-api-service/web
          docker push registry.heroku.com/prod-api-test-service/web
      -
        name: Deploy :prod
        run: |
          heroku container:release -a prod-api-service web
          heroku container:release -a prod-api-test-service web
