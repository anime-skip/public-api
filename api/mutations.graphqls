type Mutation {
  # Account
  """
  Create a user account. 3rd party applications will not have access to this function because of
  `recaptchaResponse`. Redirect new users to create an account on <anime-skip.com>
  """
  createAccount(
    username: String!
    email: String!
    passwordHash: String!
    recaptchaResponse: String!
  ): LoginData!
  """
  Change a user's password by first confirming the old one. This is not a forgot password flow

  > Note the passwords aren't md5 hashes. The regular login will be moving to this as well eventually
  """
  changePassword(
    oldPassword: String!
    newPassword: String!
    confirmNewPassword: String!
  ): LoginData!
  "Resend the verification email for the account of the authenticated user"
  resendVerificationEmail(recaptchaResponse: String!): Boolean @authenticated
  """
  Callback to handle the verification token included in the email sent using
  `resendVerificationEmail`
  """
  verifyEmailAddress(validationToken: String!): Account!
  """
  The first step in the password reset process

  It sends an email containing a link to reset your password with. That link includes a token, the
  `passwordResetToken`, that can be passed into the `resetPassword` mutation.

  > Because the `recaptchaResponse` is required, this can not be performed by 3rd parties
  """
  requestPasswordReset(recaptchaResponse: String!, email: String!): Boolean!
  """
  The second step in the password reset process, coming after `requestPasswordReset`

  This step is pretty self explanatory, this is when the password is actually reset for a user
  """
  resetPassword(
    passwordResetToken: String!
    newPassword: String!
    confirmNewPassword: String!
  ): LoginData!
  """
  Request your account be deleted. The user will receive an email with a link to confirm deleting
  their account
  """
  deleteAccountRequest(passwordHash: String!): Account! @authenticated
  "Handle a deleteToken from `deleteAccountRequest` and actually delete the user's account"
  deleteAccount(deleteToken: String!): Account!

  # Preferences
  "Update user preferences"
  savePreferences(preferences: InputPreferences!): Preferences! @authenticated

  # Shows
  "Create a show and optionally become an admin"
  createShow(showInput: InputShow!, becomeAdmin: Boolean!): Show! @authenticated
  """
  Update show data

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  updateShow(showId: ID! @isShowAdmin, newShow: InputShow!): Show!
  """
  Delete a show and all it's children (episodes, episode urls, timestamps, admins, etc)

  > `@hasRole(role: ADMIN)` - The user must have the `ADMIN` role to perform this action
  """
  deleteShow(showId: ID!): Show! @hasRole(role: ADMIN)

  # Show Admins
  """
  Give admin privilege to a user for a show.

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  createShowAdmin(showAdminInput: InputShowAdmin! @isShowAdmin): ShowAdmin!
  """
  Remove admin privileges from a user for a show.

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  deleteShowAdmin(showAdminId: ID! @isShowAdmin): ShowAdmin!

  # Episodes
  """
  Create an episode under a `Show`

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  createEpisode(showId: ID! @isShowAdmin, episodeInput: InputEpisode!): Episode!
  """
  Update episode info

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  updateEpisode(
    episodeId: ID! @isShowAdmin
    newEpisode: InputEpisode!
  ): Episode!
  """
  Delete an episode and all it's child data

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  deleteEpisode(episodeId: ID! @isShowAdmin): Episode!

  # Episode Urls
  """
  Link an `Episode` to a service URL

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  createEpisodeUrl(
    episodeId: ID! @isShowAdmin
    episodeUrlInput: InputEpisodeUrl!
  ): EpisodeUrl!
  """
  Unlink an `Episode` to from service URL

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  deleteEpisodeUrl(episodeUrl: String! @isShowAdmin): EpisodeUrl!
  """
  Update episode url info

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  updateEpisodeUrl(
    episodeUrl: String! @isShowAdmin
    newEpisodeUrl: InputEpisodeUrl!
  ): EpisodeUrl!

  # Timestamps
  """
  Add a timestamp to an `Episode`

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  createTimestamp(
    episodeId: ID! @isShowAdmin
    timestampInput: InputTimestamp!
  ): Timestamp!
  """
  Update timestamp data

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  updateTimestamp(
    timestampId: ID! @isShowAdmin
    newTimestamp: InputTimestamp!
  ): Timestamp!
  """
  Delete a timestamp

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  deleteTimestamp(timestampId: ID! @isShowAdmin): Timestamp!
  """
  Will create, update, and delete timestamps as passed. Partial failures are completely rolled back

  > `@isShowAdmin` - You need to be an admin of the show to do this action
  """
  updateTimestamps(
    create: [InputTimestampOn!]!
    update: [InputExistingTimestamp!]!
    delete: [ID!]!
  ): UpdatedTimestamps!

  # Timestamp Types
  """
  Create a timestamp type

  > `@hasRole(role: ADMIN)` - The user must have the `ADMIN` role to perform this action
  """
  createTimestampType(timestampTypeInput: InputTimestampType!): TimestampType!
    @hasRole(role: ADMIN)
  """
  Update a timestamp type

  > `@hasRole(role: ADMIN)` - The user must have the `ADMIN` role to perform this action
  """
  updateTimestampType(
    timestampTypeId: ID!
    newTimestampType: InputTimestampType!
  ): TimestampType! @hasRole(role: ADMIN)
  """
  Delete a timestamp type

  > `@hasRole(role: ADMIN)` - The user must have the `ADMIN` role to perform this action
  """
  deleteTimestampType(timestampTypeId: ID!): TimestampType!
    @hasRole(role: ADMIN)

  # Templates
  # TODO: Add case to isShowAdmin for `newTemplate` and `templateId`
  "Make changes to an existing template"
  createTemplate(newTemplate: InputTemplate! @isShowAdmin): Template!
    @authenticated
  "Make changes to an existing template"
  updateTemplate(
    templateId: ID! @isShowAdmin
    newTemplate: InputTemplate!
  ): Template! @authenticated
  "Delete an existing template"
  deleteTemplate(templateId: ID! @isShowAdmin): Template! @authenticated
  "Add a timestamp to an existing template"
  addTimestampToTemplate(
    templateTimestamp: InputTemplateTimestamp!
  ): TemplateTimestamp! @authenticated
  "Remove a timestamp from an existing template"
  removeTimestampFromTemplate(
    templateTimestamp: InputTemplateTimestamp!
  ): TemplateTimestamp! @authenticated
  # """
  # Add and/or remove a set of timestamps from an existing template. Partial failures are completely
  # rolled back
  # """
  # updateTemplateTimestamps(templateId: ID!, add: [InputTemplateTimestamp!], remove: [InputTemplateTimestamp!]): [TemplateTimestamp!]!
}
